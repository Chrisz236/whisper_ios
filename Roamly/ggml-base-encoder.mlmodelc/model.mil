program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "5.33.5"}, {"coremlc-version", "1877.40.3"}})]
{
    func main<ios15>(tensor<fp32, [1, 80, 3000]> logmel_data) {
            tensor<int32, []> var_20 = const()[name = tensor<string, []>("op_20"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_28 = const()[name = tensor<string, []>("op_28"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_30 = const()[name = tensor<string, []>("op_30"), val = tensor<int32, [1]>([1])];
            tensor<string, []> var_32_pad_type_0 = const()[name = tensor<string, []>("op_32_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_32_pad_0 = const()[name = tensor<string, []>("op_32_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> logmel_data_to_fp16_dtype_0 = const()[name = tensor<string, []>("logmel_data_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [512, 80, 3]> weight_3_to_fp16 = const()[name = tensor<string, []>("weight_3_to_fp16"), val = tensor<fp16, [512, 80, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [512]> bias_3_to_fp16 = const()[name = tensor<string, []>("bias_3_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(245888)))];
            tensor<fp16, [1, 80, 3000]> cast_505 = cast(dtype = logmel_data_to_fp16_dtype_0, x = logmel_data);
            tensor<fp16, [1, 512, 3000]> var_32_cast = conv(bias = bias_3_to_fp16, dilations = var_30, groups = var_20, pad = var_32_pad_0, pad_type = var_32_pad_type_0, strides = var_28, weight = weight_3_to_fp16, x = cast_505);
            tensor<string, []> input_1_mode_0 = const()[name = tensor<string, []>("input_1_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 512, 3000]> input_1_cast = gelu(mode = input_1_mode_0, x = var_32_cast);
            tensor<int32, []> var_36 = const()[name = tensor<string, []>("op_36"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_45 = const()[name = tensor<string, []>("op_45"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> var_47 = const()[name = tensor<string, []>("op_47"), val = tensor<int32, [1]>([1])];
            tensor<string, []> var_49_pad_type_0 = const()[name = tensor<string, []>("op_49_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_49_pad_0 = const()[name = tensor<string, []>("op_49_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [512, 512, 3]> weight_7_to_fp16 = const()[name = tensor<string, []>("weight_7_to_fp16"), val = tensor<fp16, [512, 512, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(246976)))];
            tensor<fp16, [512]> bias_7_to_fp16 = const()[name = tensor<string, []>("bias_7_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1819904)))];
            tensor<fp16, [1, 512, 1500]> var_49_cast = conv(bias = bias_7_to_fp16, dilations = var_47, groups = var_36, pad = var_49_pad_0, pad_type = var_49_pad_type_0, strides = var_45, weight = weight_7_to_fp16, x = input_1_cast);
            tensor<string, []> x_3_mode_0 = const()[name = tensor<string, []>("x_3_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 512, 1500]> x_3_cast = gelu(mode = x_3_mode_0, x = var_49_cast);
            tensor<fp16, [512, 1500]> var_53_to_fp16 = const()[name = tensor<string, []>("op_53_to_fp16"), val = tensor<fp16, [512, 1500]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1820992)))];
            tensor<fp16, [1, 512, 1500]> var_55_cast = add(x = x_3_cast, y = var_53_to_fp16);
            tensor<int32, [1]> inputs_1_axes_0 = const()[name = tensor<string, []>("inputs_1_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 512, 1, 1500]> inputs_1_cast = expand_dims(axes = inputs_1_axes_0, x = var_55_cast);
            tensor<int32, []> var_69 = const()[name = tensor<string, []>("op_69"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_70 = const()[name = tensor<string, []>("op_70"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_79 = const()[name = tensor<string, []>("op_79"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_1_cast = reduce_mean(axes = var_79, keep_dims = var_70, x = inputs_1_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_1_cast = sub(x = inputs_1_cast, y = channels_mean_1_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_1_cast = mul(x = zero_mean_1_cast, y = zero_mean_1_cast);
            tensor<int32, [1]> var_83 = const()[name = tensor<string, []>("op_83"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_84_cast = reduce_mean(axes = var_83, keep_dims = var_70, x = zero_mean_sq_1_cast);
            tensor<fp16, []> var_85_to_fp16 = const()[name = tensor<string, []>("op_85_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_86_cast = add(x = var_84_cast, y = var_85_to_fp16);
            tensor<fp16, []> denom_1_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_1_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_1_cast = rsqrt(epsilon = denom_1_epsilon_0_to_fp16, x = var_86_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_1_cast = mul(x = zero_mean_1_cast, y = denom_1_cast);
            tensor<fp16, [1, 512, 1, 1]> var_90_to_fp16 = const()[name = tensor<string, []>("op_90_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3357056)))];
            tensor<fp16, [1, 512, 1, 1500]> var_91_cast = add(x = out_1_cast, y = var_90_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_93_to_fp16 = const()[name = tensor<string, []>("op_93_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3358144)))];
            tensor<fp16, [1, 512, 1, 1500]> input_3_cast = mul(x = var_91_cast, y = var_93_to_fp16);
            tensor<int32, [2]> var_101 = const()[name = tensor<string, []>("op_101"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_103 = const()[name = tensor<string, []>("op_103"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_1_pad_type_0 = const()[name = tensor<string, []>("q_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_1_pad_0 = const()[name = tensor<string, []>("q_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> var_120_weight_0_to_fp16 = const()[name = tensor<string, []>("op_120_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3359232)))];
            tensor<fp16, [512]> var_120_bias_0_to_fp16 = const()[name = tensor<string, []>("op_120_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3883584)))];
            tensor<fp16, [1, 512, 1, 1500]> var_120_cast = conv(bias = var_120_bias_0_to_fp16, dilations = var_103, groups = var_69, pad = q_1_pad_0, pad_type = q_1_pad_type_0, strides = var_101, weight = var_120_weight_0_to_fp16, x = input_3_cast);
            tensor<int32, [2]> var_107 = const()[name = tensor<string, []>("op_107"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_109 = const()[name = tensor<string, []>("op_109"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_1_pad_type_0 = const()[name = tensor<string, []>("k_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_1_pad_0 = const()[name = tensor<string, []>("k_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_0_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3884672)))];
            tensor<fp16, [1, 512, 1, 1500]> k_1_cast = conv(dilations = var_109, groups = var_69, pad = k_1_pad_0, pad_type = k_1_pad_type_0, strides = var_107, weight = blocks_0_attn_key_weight_to_fp16, x = input_3_cast);
            tensor<int32, [2]> var_114 = const()[name = tensor<string, []>("op_114"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_116 = const()[name = tensor<string, []>("op_116"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_118_pad_type_0 = const()[name = tensor<string, []>("op_118_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_118_pad_0 = const()[name = tensor<string, []>("op_118_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_0_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4409024)))];
            tensor<fp16, [512]> blocks_0_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4933376)))];
            tensor<fp16, [1, 512, 1, 1500]> var_118_cast = conv(bias = blocks_0_attn_value_bias_to_fp16, dilations = var_116, groups = var_69, pad = var_118_pad_0, pad_type = var_118_pad_type_0, strides = var_114, weight = blocks_0_attn_value_weight_to_fp16, x = input_3_cast);
            tensor<int32, [8]> tile_0 = const()[name = tensor<string, []>("tile_0"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_121_axis_0 = const()[name = tensor<string, []>("op_121_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_121_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_121_cast_7 = split(axis = var_121_axis_0, split_sizes = tile_0, x = var_120_cast);
            tensor<int32, [4]> var_130_perm_0 = const()[name = tensor<string, []>("op_130_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_1 = const()[name = tensor<string, []>("tile_1"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_131_axis_0 = const()[name = tensor<string, []>("op_131_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> transpose_6 = transpose(perm = var_130_perm_0, x = k_1_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_131_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_5, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_6, tensor<fp16, [1, 1500, 1, 64]> var_131_cast_7 = split(axis = var_131_axis_0, split_sizes = tile_1, x = transpose_6);
            tensor<int32, [8]> tile_2 = const()[name = tensor<string, []>("tile_2"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_140_axis_0 = const()[name = tensor<string, []>("op_140_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_140_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_140_cast_7 = split(axis = var_140_axis_0, split_sizes = tile_2, x = var_118_cast);
            tensor<string, []> aw_1_equation_0 = const()[name = tensor<string, []>("aw_1_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_1_cast = einsum(equation = aw_1_equation_0, values = (var_131_cast_0, var_121_cast_0));
            tensor<string, []> aw_3_equation_0 = const()[name = tensor<string, []>("aw_3_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_3_cast = einsum(equation = aw_3_equation_0, values = (var_131_cast_1, var_121_cast_1));
            tensor<string, []> aw_5_equation_0 = const()[name = tensor<string, []>("aw_5_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_5_cast = einsum(equation = aw_5_equation_0, values = (var_131_cast_2, var_121_cast_2));
            tensor<string, []> aw_7_equation_0 = const()[name = tensor<string, []>("aw_7_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_7_cast = einsum(equation = aw_7_equation_0, values = (var_131_cast_3, var_121_cast_3));
            tensor<string, []> aw_9_equation_0 = const()[name = tensor<string, []>("aw_9_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_9_cast = einsum(equation = aw_9_equation_0, values = (var_131_cast_4, var_121_cast_4));
            tensor<string, []> aw_11_equation_0 = const()[name = tensor<string, []>("aw_11_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_11_cast = einsum(equation = aw_11_equation_0, values = (var_131_cast_5, var_121_cast_5));
            tensor<string, []> aw_13_equation_0 = const()[name = tensor<string, []>("aw_13_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_13_cast = einsum(equation = aw_13_equation_0, values = (var_131_cast_6, var_121_cast_6));
            tensor<string, []> aw_15_equation_0 = const()[name = tensor<string, []>("aw_15_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_15_cast = einsum(equation = aw_15_equation_0, values = (var_131_cast_7, var_121_cast_7));
            tensor<fp16, [1, 1500, 1, 1500]> var_165_cast = softmax(axis = var_69, x = aw_1_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_166_cast = softmax(axis = var_69, x = aw_3_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_167_cast = softmax(axis = var_69, x = aw_5_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_168_cast = softmax(axis = var_69, x = aw_7_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_169_cast = softmax(axis = var_69, x = aw_9_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_170_cast = softmax(axis = var_69, x = aw_11_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_171_cast = softmax(axis = var_69, x = aw_13_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_172_cast = softmax(axis = var_69, x = aw_15_cast);
            tensor<string, []> var_174_equation_0 = const()[name = tensor<string, []>("op_174_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_174_cast = einsum(equation = var_174_equation_0, values = (var_140_cast_0, var_165_cast));
            tensor<string, []> var_176_equation_0 = const()[name = tensor<string, []>("op_176_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_176_cast = einsum(equation = var_176_equation_0, values = (var_140_cast_1, var_166_cast));
            tensor<string, []> var_178_equation_0 = const()[name = tensor<string, []>("op_178_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_178_cast = einsum(equation = var_178_equation_0, values = (var_140_cast_2, var_167_cast));
            tensor<string, []> var_180_equation_0 = const()[name = tensor<string, []>("op_180_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_180_cast = einsum(equation = var_180_equation_0, values = (var_140_cast_3, var_168_cast));
            tensor<string, []> var_182_equation_0 = const()[name = tensor<string, []>("op_182_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_182_cast = einsum(equation = var_182_equation_0, values = (var_140_cast_4, var_169_cast));
            tensor<string, []> var_184_equation_0 = const()[name = tensor<string, []>("op_184_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_184_cast = einsum(equation = var_184_equation_0, values = (var_140_cast_5, var_170_cast));
            tensor<string, []> var_186_equation_0 = const()[name = tensor<string, []>("op_186_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_186_cast = einsum(equation = var_186_equation_0, values = (var_140_cast_6, var_171_cast));
            tensor<string, []> var_188_equation_0 = const()[name = tensor<string, []>("op_188_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_188_cast = einsum(equation = var_188_equation_0, values = (var_140_cast_7, var_172_cast));
            tensor<bool, []> input_5_interleave_0 = const()[name = tensor<string, []>("input_5_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_5_cast = concat(axis = var_69, interleave = input_5_interleave_0, values = (var_174_cast, var_176_cast, var_178_cast, var_180_cast, var_182_cast, var_184_cast, var_186_cast, var_188_cast));
            tensor<int32, [2]> var_193 = const()[name = tensor<string, []>("op_193"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_195 = const()[name = tensor<string, []>("op_195"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_197_pad_type_0 = const()[name = tensor<string, []>("op_197_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_197_pad_0 = const()[name = tensor<string, []>("op_197_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_0_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4934464)))];
            tensor<fp16, [512]> blocks_0_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5458816)))];
            tensor<fp16, [1, 512, 1, 1500]> var_197_cast = conv(bias = blocks_0_attn_out_bias_to_fp16, dilations = var_195, groups = var_69, pad = var_197_pad_0, pad_type = var_197_pad_type_0, strides = var_193, weight = blocks_0_attn_out_weight_to_fp16, x = input_5_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_3_cast = add(x = inputs_1_cast, y = var_197_cast);
            tensor<int32, [1]> var_201 = const()[name = tensor<string, []>("op_201"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_3_cast = reduce_mean(axes = var_201, keep_dims = var_70, x = inputs_3_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_3_cast = sub(x = inputs_3_cast, y = channels_mean_3_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_3_cast = mul(x = zero_mean_3_cast, y = zero_mean_3_cast);
            tensor<int32, [1]> var_205 = const()[name = tensor<string, []>("op_205"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_206_cast = reduce_mean(axes = var_205, keep_dims = var_70, x = zero_mean_sq_3_cast);
            tensor<fp16, []> var_207_to_fp16 = const()[name = tensor<string, []>("op_207_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_208_cast = add(x = var_206_cast, y = var_207_to_fp16);
            tensor<fp16, []> denom_3_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_3_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_3_cast = rsqrt(epsilon = denom_3_epsilon_0_to_fp16, x = var_208_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_3_cast = mul(x = zero_mean_3_cast, y = denom_3_cast);
            tensor<fp16, [1, 512, 1, 1]> var_212_to_fp16 = const()[name = tensor<string, []>("op_212_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5459904)))];
            tensor<fp16, [1, 512, 1, 1500]> var_213_cast = add(x = out_3_cast, y = var_212_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_215_to_fp16 = const()[name = tensor<string, []>("op_215_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5460992)))];
            tensor<fp16, [1, 512, 1, 1500]> input_7_cast = mul(x = var_213_cast, y = var_215_to_fp16);
            tensor<int32, [2]> var_221 = const()[name = tensor<string, []>("op_221"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_223 = const()[name = tensor<string, []>("op_223"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [2048, 512, 1, 1]> blocks_0_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5462080)))];
            tensor<fp16, [2048]> blocks_0_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7559296)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_9_cast = conv(bias = blocks_0_mlp_0_bias_to_fp16, dilations = var_223, groups = var_69, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = var_221, weight = blocks_0_mlp_0_weight_to_fp16, x = input_7_cast);
            tensor<string, []> input_11_mode_0 = const()[name = tensor<string, []>("input_11_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_11_cast = gelu(mode = input_11_mode_0, x = input_9_cast);
            tensor<int32, [2]> var_229 = const()[name = tensor<string, []>("op_229"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_231 = const()[name = tensor<string, []>("op_231"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_233_pad_type_0 = const()[name = tensor<string, []>("op_233_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_233_pad_0 = const()[name = tensor<string, []>("op_233_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 2048, 1, 1]> blocks_0_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7563456)))];
            tensor<fp16, [512]> blocks_0_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9660672)))];
            tensor<fp16, [1, 512, 1, 1500]> var_233_cast = conv(bias = blocks_0_mlp_2_bias_to_fp16, dilations = var_231, groups = var_69, pad = var_233_pad_0, pad_type = var_233_pad_type_0, strides = var_229, weight = blocks_0_mlp_2_weight_to_fp16, x = input_11_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_5_cast = add(x = inputs_3_cast, y = var_233_cast);
            tensor<int32, []> var_241 = const()[name = tensor<string, []>("op_241"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_242 = const()[name = tensor<string, []>("op_242"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_251 = const()[name = tensor<string, []>("op_251"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_5_cast = reduce_mean(axes = var_251, keep_dims = var_242, x = inputs_5_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_5_cast = sub(x = inputs_5_cast, y = channels_mean_5_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_5_cast = mul(x = zero_mean_5_cast, y = zero_mean_5_cast);
            tensor<int32, [1]> var_255 = const()[name = tensor<string, []>("op_255"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_256_cast = reduce_mean(axes = var_255, keep_dims = var_242, x = zero_mean_sq_5_cast);
            tensor<fp16, []> var_257_to_fp16 = const()[name = tensor<string, []>("op_257_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_258_cast = add(x = var_256_cast, y = var_257_to_fp16);
            tensor<fp16, []> denom_5_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_5_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_5_cast = rsqrt(epsilon = denom_5_epsilon_0_to_fp16, x = var_258_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_5_cast = mul(x = zero_mean_5_cast, y = denom_5_cast);
            tensor<fp16, [1, 512, 1, 1]> var_262_to_fp16 = const()[name = tensor<string, []>("op_262_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9661760)))];
            tensor<fp16, [1, 512, 1, 1500]> var_263_cast = add(x = out_5_cast, y = var_262_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_265_to_fp16 = const()[name = tensor<string, []>("op_265_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9662848)))];
            tensor<fp16, [1, 512, 1, 1500]> input_13_cast = mul(x = var_263_cast, y = var_265_to_fp16);
            tensor<int32, [2]> var_273 = const()[name = tensor<string, []>("op_273"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_275 = const()[name = tensor<string, []>("op_275"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_3_pad_type_0 = const()[name = tensor<string, []>("q_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_3_pad_0 = const()[name = tensor<string, []>("q_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> var_292_weight_0_to_fp16 = const()[name = tensor<string, []>("op_292_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9663936)))];
            tensor<fp16, [512]> var_292_bias_0_to_fp16 = const()[name = tensor<string, []>("op_292_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10188288)))];
            tensor<fp16, [1, 512, 1, 1500]> var_292_cast = conv(bias = var_292_bias_0_to_fp16, dilations = var_275, groups = var_241, pad = q_3_pad_0, pad_type = q_3_pad_type_0, strides = var_273, weight = var_292_weight_0_to_fp16, x = input_13_cast);
            tensor<int32, [2]> var_279 = const()[name = tensor<string, []>("op_279"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_281 = const()[name = tensor<string, []>("op_281"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_3_pad_type_0 = const()[name = tensor<string, []>("k_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_3_pad_0 = const()[name = tensor<string, []>("k_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_1_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10189376)))];
            tensor<fp16, [1, 512, 1, 1500]> k_3_cast = conv(dilations = var_281, groups = var_241, pad = k_3_pad_0, pad_type = k_3_pad_type_0, strides = var_279, weight = blocks_1_attn_key_weight_to_fp16, x = input_13_cast);
            tensor<int32, [2]> var_286 = const()[name = tensor<string, []>("op_286"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_288 = const()[name = tensor<string, []>("op_288"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_290_pad_type_0 = const()[name = tensor<string, []>("op_290_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_290_pad_0 = const()[name = tensor<string, []>("op_290_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_1_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10713728)))];
            tensor<fp16, [512]> blocks_1_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11238080)))];
            tensor<fp16, [1, 512, 1, 1500]> var_290_cast = conv(bias = blocks_1_attn_value_bias_to_fp16, dilations = var_288, groups = var_241, pad = var_290_pad_0, pad_type = var_290_pad_type_0, strides = var_286, weight = blocks_1_attn_value_weight_to_fp16, x = input_13_cast);
            tensor<int32, [8]> tile_3 = const()[name = tensor<string, []>("tile_3"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_293_axis_0 = const()[name = tensor<string, []>("op_293_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_293_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_293_cast_7 = split(axis = var_293_axis_0, split_sizes = tile_3, x = var_292_cast);
            tensor<int32, [4]> var_302_perm_0 = const()[name = tensor<string, []>("op_302_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_4 = const()[name = tensor<string, []>("tile_4"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_303_axis_0 = const()[name = tensor<string, []>("op_303_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> transpose_5 = transpose(perm = var_302_perm_0, x = k_3_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_303_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_5, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_6, tensor<fp16, [1, 1500, 1, 64]> var_303_cast_7 = split(axis = var_303_axis_0, split_sizes = tile_4, x = transpose_5);
            tensor<int32, [8]> tile_5 = const()[name = tensor<string, []>("tile_5"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_312_axis_0 = const()[name = tensor<string, []>("op_312_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_312_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_312_cast_7 = split(axis = var_312_axis_0, split_sizes = tile_5, x = var_290_cast);
            tensor<string, []> aw_17_equation_0 = const()[name = tensor<string, []>("aw_17_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_17_cast = einsum(equation = aw_17_equation_0, values = (var_303_cast_0, var_293_cast_0));
            tensor<string, []> aw_19_equation_0 = const()[name = tensor<string, []>("aw_19_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_19_cast = einsum(equation = aw_19_equation_0, values = (var_303_cast_1, var_293_cast_1));
            tensor<string, []> aw_21_equation_0 = const()[name = tensor<string, []>("aw_21_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_21_cast = einsum(equation = aw_21_equation_0, values = (var_303_cast_2, var_293_cast_2));
            tensor<string, []> aw_23_equation_0 = const()[name = tensor<string, []>("aw_23_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_23_cast = einsum(equation = aw_23_equation_0, values = (var_303_cast_3, var_293_cast_3));
            tensor<string, []> aw_25_equation_0 = const()[name = tensor<string, []>("aw_25_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_25_cast = einsum(equation = aw_25_equation_0, values = (var_303_cast_4, var_293_cast_4));
            tensor<string, []> aw_27_equation_0 = const()[name = tensor<string, []>("aw_27_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_27_cast = einsum(equation = aw_27_equation_0, values = (var_303_cast_5, var_293_cast_5));
            tensor<string, []> aw_29_equation_0 = const()[name = tensor<string, []>("aw_29_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_29_cast = einsum(equation = aw_29_equation_0, values = (var_303_cast_6, var_293_cast_6));
            tensor<string, []> aw_31_equation_0 = const()[name = tensor<string, []>("aw_31_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_31_cast = einsum(equation = aw_31_equation_0, values = (var_303_cast_7, var_293_cast_7));
            tensor<fp16, [1, 1500, 1, 1500]> var_337_cast = softmax(axis = var_241, x = aw_17_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_338_cast = softmax(axis = var_241, x = aw_19_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_339_cast = softmax(axis = var_241, x = aw_21_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_340_cast = softmax(axis = var_241, x = aw_23_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_341_cast = softmax(axis = var_241, x = aw_25_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_342_cast = softmax(axis = var_241, x = aw_27_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_343_cast = softmax(axis = var_241, x = aw_29_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_344_cast = softmax(axis = var_241, x = aw_31_cast);
            tensor<string, []> var_346_equation_0 = const()[name = tensor<string, []>("op_346_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_346_cast = einsum(equation = var_346_equation_0, values = (var_312_cast_0, var_337_cast));
            tensor<string, []> var_348_equation_0 = const()[name = tensor<string, []>("op_348_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_348_cast = einsum(equation = var_348_equation_0, values = (var_312_cast_1, var_338_cast));
            tensor<string, []> var_350_equation_0 = const()[name = tensor<string, []>("op_350_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_350_cast = einsum(equation = var_350_equation_0, values = (var_312_cast_2, var_339_cast));
            tensor<string, []> var_352_equation_0 = const()[name = tensor<string, []>("op_352_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_352_cast = einsum(equation = var_352_equation_0, values = (var_312_cast_3, var_340_cast));
            tensor<string, []> var_354_equation_0 = const()[name = tensor<string, []>("op_354_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_354_cast = einsum(equation = var_354_equation_0, values = (var_312_cast_4, var_341_cast));
            tensor<string, []> var_356_equation_0 = const()[name = tensor<string, []>("op_356_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_356_cast = einsum(equation = var_356_equation_0, values = (var_312_cast_5, var_342_cast));
            tensor<string, []> var_358_equation_0 = const()[name = tensor<string, []>("op_358_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_358_cast = einsum(equation = var_358_equation_0, values = (var_312_cast_6, var_343_cast));
            tensor<string, []> var_360_equation_0 = const()[name = tensor<string, []>("op_360_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_360_cast = einsum(equation = var_360_equation_0, values = (var_312_cast_7, var_344_cast));
            tensor<bool, []> input_15_interleave_0 = const()[name = tensor<string, []>("input_15_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_15_cast = concat(axis = var_241, interleave = input_15_interleave_0, values = (var_346_cast, var_348_cast, var_350_cast, var_352_cast, var_354_cast, var_356_cast, var_358_cast, var_360_cast));
            tensor<int32, [2]> var_365 = const()[name = tensor<string, []>("op_365"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_367 = const()[name = tensor<string, []>("op_367"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_369_pad_type_0 = const()[name = tensor<string, []>("op_369_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_369_pad_0 = const()[name = tensor<string, []>("op_369_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_1_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11239168)))];
            tensor<fp16, [512]> blocks_1_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11763520)))];
            tensor<fp16, [1, 512, 1, 1500]> var_369_cast = conv(bias = blocks_1_attn_out_bias_to_fp16, dilations = var_367, groups = var_241, pad = var_369_pad_0, pad_type = var_369_pad_type_0, strides = var_365, weight = blocks_1_attn_out_weight_to_fp16, x = input_15_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_7_cast = add(x = inputs_5_cast, y = var_369_cast);
            tensor<int32, [1]> var_373 = const()[name = tensor<string, []>("op_373"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_7_cast = reduce_mean(axes = var_373, keep_dims = var_242, x = inputs_7_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_7_cast = sub(x = inputs_7_cast, y = channels_mean_7_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_7_cast = mul(x = zero_mean_7_cast, y = zero_mean_7_cast);
            tensor<int32, [1]> var_377 = const()[name = tensor<string, []>("op_377"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_378_cast = reduce_mean(axes = var_377, keep_dims = var_242, x = zero_mean_sq_7_cast);
            tensor<fp16, []> var_379_to_fp16 = const()[name = tensor<string, []>("op_379_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_380_cast = add(x = var_378_cast, y = var_379_to_fp16);
            tensor<fp16, []> denom_7_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_7_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_7_cast = rsqrt(epsilon = denom_7_epsilon_0_to_fp16, x = var_380_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_7_cast = mul(x = zero_mean_7_cast, y = denom_7_cast);
            tensor<fp16, [1, 512, 1, 1]> var_384_to_fp16 = const()[name = tensor<string, []>("op_384_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11764608)))];
            tensor<fp16, [1, 512, 1, 1500]> var_385_cast = add(x = out_7_cast, y = var_384_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_387_to_fp16 = const()[name = tensor<string, []>("op_387_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11765696)))];
            tensor<fp16, [1, 512, 1, 1500]> input_17_cast = mul(x = var_385_cast, y = var_387_to_fp16);
            tensor<int32, [2]> var_393 = const()[name = tensor<string, []>("op_393"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_395 = const()[name = tensor<string, []>("op_395"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_19_pad_type_0 = const()[name = tensor<string, []>("input_19_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [2048, 512, 1, 1]> blocks_1_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11766784)))];
            tensor<fp16, [2048]> blocks_1_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13864000)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_19_cast = conv(bias = blocks_1_mlp_0_bias_to_fp16, dilations = var_395, groups = var_241, pad = input_19_pad_0, pad_type = input_19_pad_type_0, strides = var_393, weight = blocks_1_mlp_0_weight_to_fp16, x = input_17_cast);
            tensor<string, []> input_21_mode_0 = const()[name = tensor<string, []>("input_21_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_21_cast = gelu(mode = input_21_mode_0, x = input_19_cast);
            tensor<int32, [2]> var_401 = const()[name = tensor<string, []>("op_401"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_403 = const()[name = tensor<string, []>("op_403"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_405_pad_type_0 = const()[name = tensor<string, []>("op_405_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_405_pad_0 = const()[name = tensor<string, []>("op_405_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 2048, 1, 1]> blocks_1_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13868160)))];
            tensor<fp16, [512]> blocks_1_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15965376)))];
            tensor<fp16, [1, 512, 1, 1500]> var_405_cast = conv(bias = blocks_1_mlp_2_bias_to_fp16, dilations = var_403, groups = var_241, pad = var_405_pad_0, pad_type = var_405_pad_type_0, strides = var_401, weight = blocks_1_mlp_2_weight_to_fp16, x = input_21_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_9_cast = add(x = inputs_7_cast, y = var_405_cast);
            tensor<int32, []> var_413 = const()[name = tensor<string, []>("op_413"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_414 = const()[name = tensor<string, []>("op_414"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_423 = const()[name = tensor<string, []>("op_423"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_9_cast = reduce_mean(axes = var_423, keep_dims = var_414, x = inputs_9_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_9_cast = sub(x = inputs_9_cast, y = channels_mean_9_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_9_cast = mul(x = zero_mean_9_cast, y = zero_mean_9_cast);
            tensor<int32, [1]> var_427 = const()[name = tensor<string, []>("op_427"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_428_cast = reduce_mean(axes = var_427, keep_dims = var_414, x = zero_mean_sq_9_cast);
            tensor<fp16, []> var_429_to_fp16 = const()[name = tensor<string, []>("op_429_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_430_cast = add(x = var_428_cast, y = var_429_to_fp16);
            tensor<fp16, []> denom_9_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_9_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_9_cast = rsqrt(epsilon = denom_9_epsilon_0_to_fp16, x = var_430_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_9_cast = mul(x = zero_mean_9_cast, y = denom_9_cast);
            tensor<fp16, [1, 512, 1, 1]> var_434_to_fp16 = const()[name = tensor<string, []>("op_434_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15966464)))];
            tensor<fp16, [1, 512, 1, 1500]> var_435_cast = add(x = out_9_cast, y = var_434_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_437_to_fp16 = const()[name = tensor<string, []>("op_437_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15967552)))];
            tensor<fp16, [1, 512, 1, 1500]> input_23_cast = mul(x = var_435_cast, y = var_437_to_fp16);
            tensor<int32, [2]> var_445 = const()[name = tensor<string, []>("op_445"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_447 = const()[name = tensor<string, []>("op_447"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_5_pad_type_0 = const()[name = tensor<string, []>("q_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_5_pad_0 = const()[name = tensor<string, []>("q_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> var_464_weight_0_to_fp16 = const()[name = tensor<string, []>("op_464_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15968640)))];
            tensor<fp16, [512]> var_464_bias_0_to_fp16 = const()[name = tensor<string, []>("op_464_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16492992)))];
            tensor<fp16, [1, 512, 1, 1500]> var_464_cast = conv(bias = var_464_bias_0_to_fp16, dilations = var_447, groups = var_413, pad = q_5_pad_0, pad_type = q_5_pad_type_0, strides = var_445, weight = var_464_weight_0_to_fp16, x = input_23_cast);
            tensor<int32, [2]> var_451 = const()[name = tensor<string, []>("op_451"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_453 = const()[name = tensor<string, []>("op_453"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_5_pad_type_0 = const()[name = tensor<string, []>("k_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_5_pad_0 = const()[name = tensor<string, []>("k_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_2_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16494080)))];
            tensor<fp16, [1, 512, 1, 1500]> k_5_cast = conv(dilations = var_453, groups = var_413, pad = k_5_pad_0, pad_type = k_5_pad_type_0, strides = var_451, weight = blocks_2_attn_key_weight_to_fp16, x = input_23_cast);
            tensor<int32, [2]> var_458 = const()[name = tensor<string, []>("op_458"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_460 = const()[name = tensor<string, []>("op_460"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_462_pad_type_0 = const()[name = tensor<string, []>("op_462_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_462_pad_0 = const()[name = tensor<string, []>("op_462_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_2_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17018432)))];
            tensor<fp16, [512]> blocks_2_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17542784)))];
            tensor<fp16, [1, 512, 1, 1500]> var_462_cast = conv(bias = blocks_2_attn_value_bias_to_fp16, dilations = var_460, groups = var_413, pad = var_462_pad_0, pad_type = var_462_pad_type_0, strides = var_458, weight = blocks_2_attn_value_weight_to_fp16, x = input_23_cast);
            tensor<int32, [8]> tile_6 = const()[name = tensor<string, []>("tile_6"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_465_axis_0 = const()[name = tensor<string, []>("op_465_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_465_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_465_cast_7 = split(axis = var_465_axis_0, split_sizes = tile_6, x = var_464_cast);
            tensor<int32, [4]> var_474_perm_0 = const()[name = tensor<string, []>("op_474_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_7 = const()[name = tensor<string, []>("tile_7"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_475_axis_0 = const()[name = tensor<string, []>("op_475_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> transpose_4 = transpose(perm = var_474_perm_0, x = k_5_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_475_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_5, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_6, tensor<fp16, [1, 1500, 1, 64]> var_475_cast_7 = split(axis = var_475_axis_0, split_sizes = tile_7, x = transpose_4);
            tensor<int32, [8]> tile_8 = const()[name = tensor<string, []>("tile_8"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_484_axis_0 = const()[name = tensor<string, []>("op_484_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_484_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_484_cast_7 = split(axis = var_484_axis_0, split_sizes = tile_8, x = var_462_cast);
            tensor<string, []> aw_33_equation_0 = const()[name = tensor<string, []>("aw_33_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_33_cast = einsum(equation = aw_33_equation_0, values = (var_475_cast_0, var_465_cast_0));
            tensor<string, []> aw_35_equation_0 = const()[name = tensor<string, []>("aw_35_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_35_cast = einsum(equation = aw_35_equation_0, values = (var_475_cast_1, var_465_cast_1));
            tensor<string, []> aw_37_equation_0 = const()[name = tensor<string, []>("aw_37_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_37_cast = einsum(equation = aw_37_equation_0, values = (var_475_cast_2, var_465_cast_2));
            tensor<string, []> aw_39_equation_0 = const()[name = tensor<string, []>("aw_39_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_39_cast = einsum(equation = aw_39_equation_0, values = (var_475_cast_3, var_465_cast_3));
            tensor<string, []> aw_41_equation_0 = const()[name = tensor<string, []>("aw_41_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_41_cast = einsum(equation = aw_41_equation_0, values = (var_475_cast_4, var_465_cast_4));
            tensor<string, []> aw_43_equation_0 = const()[name = tensor<string, []>("aw_43_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_43_cast = einsum(equation = aw_43_equation_0, values = (var_475_cast_5, var_465_cast_5));
            tensor<string, []> aw_45_equation_0 = const()[name = tensor<string, []>("aw_45_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_45_cast = einsum(equation = aw_45_equation_0, values = (var_475_cast_6, var_465_cast_6));
            tensor<string, []> aw_47_equation_0 = const()[name = tensor<string, []>("aw_47_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_47_cast = einsum(equation = aw_47_equation_0, values = (var_475_cast_7, var_465_cast_7));
            tensor<fp16, [1, 1500, 1, 1500]> var_509_cast = softmax(axis = var_413, x = aw_33_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_510_cast = softmax(axis = var_413, x = aw_35_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_511_cast = softmax(axis = var_413, x = aw_37_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_512_cast = softmax(axis = var_413, x = aw_39_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_513_cast = softmax(axis = var_413, x = aw_41_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_514_cast = softmax(axis = var_413, x = aw_43_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_515_cast = softmax(axis = var_413, x = aw_45_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_516_cast = softmax(axis = var_413, x = aw_47_cast);
            tensor<string, []> var_518_equation_0 = const()[name = tensor<string, []>("op_518_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_518_cast = einsum(equation = var_518_equation_0, values = (var_484_cast_0, var_509_cast));
            tensor<string, []> var_520_equation_0 = const()[name = tensor<string, []>("op_520_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_520_cast = einsum(equation = var_520_equation_0, values = (var_484_cast_1, var_510_cast));
            tensor<string, []> var_522_equation_0 = const()[name = tensor<string, []>("op_522_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_522_cast = einsum(equation = var_522_equation_0, values = (var_484_cast_2, var_511_cast));
            tensor<string, []> var_524_equation_0 = const()[name = tensor<string, []>("op_524_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_524_cast = einsum(equation = var_524_equation_0, values = (var_484_cast_3, var_512_cast));
            tensor<string, []> var_526_equation_0 = const()[name = tensor<string, []>("op_526_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_526_cast = einsum(equation = var_526_equation_0, values = (var_484_cast_4, var_513_cast));
            tensor<string, []> var_528_equation_0 = const()[name = tensor<string, []>("op_528_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_528_cast = einsum(equation = var_528_equation_0, values = (var_484_cast_5, var_514_cast));
            tensor<string, []> var_530_equation_0 = const()[name = tensor<string, []>("op_530_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_530_cast = einsum(equation = var_530_equation_0, values = (var_484_cast_6, var_515_cast));
            tensor<string, []> var_532_equation_0 = const()[name = tensor<string, []>("op_532_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_532_cast = einsum(equation = var_532_equation_0, values = (var_484_cast_7, var_516_cast));
            tensor<bool, []> input_25_interleave_0 = const()[name = tensor<string, []>("input_25_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_25_cast = concat(axis = var_413, interleave = input_25_interleave_0, values = (var_518_cast, var_520_cast, var_522_cast, var_524_cast, var_526_cast, var_528_cast, var_530_cast, var_532_cast));
            tensor<int32, [2]> var_537 = const()[name = tensor<string, []>("op_537"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_539 = const()[name = tensor<string, []>("op_539"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_541_pad_type_0 = const()[name = tensor<string, []>("op_541_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_541_pad_0 = const()[name = tensor<string, []>("op_541_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_2_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17543872)))];
            tensor<fp16, [512]> blocks_2_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18068224)))];
            tensor<fp16, [1, 512, 1, 1500]> var_541_cast = conv(bias = blocks_2_attn_out_bias_to_fp16, dilations = var_539, groups = var_413, pad = var_541_pad_0, pad_type = var_541_pad_type_0, strides = var_537, weight = blocks_2_attn_out_weight_to_fp16, x = input_25_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_11_cast = add(x = inputs_9_cast, y = var_541_cast);
            tensor<int32, [1]> var_545 = const()[name = tensor<string, []>("op_545"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_11_cast = reduce_mean(axes = var_545, keep_dims = var_414, x = inputs_11_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_11_cast = sub(x = inputs_11_cast, y = channels_mean_11_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_11_cast = mul(x = zero_mean_11_cast, y = zero_mean_11_cast);
            tensor<int32, [1]> var_549 = const()[name = tensor<string, []>("op_549"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_550_cast = reduce_mean(axes = var_549, keep_dims = var_414, x = zero_mean_sq_11_cast);
            tensor<fp16, []> var_551_to_fp16 = const()[name = tensor<string, []>("op_551_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_552_cast = add(x = var_550_cast, y = var_551_to_fp16);
            tensor<fp16, []> denom_11_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_11_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_11_cast = rsqrt(epsilon = denom_11_epsilon_0_to_fp16, x = var_552_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_11_cast = mul(x = zero_mean_11_cast, y = denom_11_cast);
            tensor<fp16, [1, 512, 1, 1]> var_556_to_fp16 = const()[name = tensor<string, []>("op_556_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18069312)))];
            tensor<fp16, [1, 512, 1, 1500]> var_557_cast = add(x = out_11_cast, y = var_556_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_559_to_fp16 = const()[name = tensor<string, []>("op_559_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18070400)))];
            tensor<fp16, [1, 512, 1, 1500]> input_27_cast = mul(x = var_557_cast, y = var_559_to_fp16);
            tensor<int32, [2]> var_565 = const()[name = tensor<string, []>("op_565"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_567 = const()[name = tensor<string, []>("op_567"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_29_pad_type_0 = const()[name = tensor<string, []>("input_29_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [2048, 512, 1, 1]> blocks_2_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18071488)))];
            tensor<fp16, [2048]> blocks_2_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20168704)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_29_cast = conv(bias = blocks_2_mlp_0_bias_to_fp16, dilations = var_567, groups = var_413, pad = input_29_pad_0, pad_type = input_29_pad_type_0, strides = var_565, weight = blocks_2_mlp_0_weight_to_fp16, x = input_27_cast);
            tensor<string, []> input_31_mode_0 = const()[name = tensor<string, []>("input_31_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_31_cast = gelu(mode = input_31_mode_0, x = input_29_cast);
            tensor<int32, [2]> var_573 = const()[name = tensor<string, []>("op_573"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_575 = const()[name = tensor<string, []>("op_575"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_577_pad_type_0 = const()[name = tensor<string, []>("op_577_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_577_pad_0 = const()[name = tensor<string, []>("op_577_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 2048, 1, 1]> blocks_2_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20172864)))];
            tensor<fp16, [512]> blocks_2_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22270080)))];
            tensor<fp16, [1, 512, 1, 1500]> var_577_cast = conv(bias = blocks_2_mlp_2_bias_to_fp16, dilations = var_575, groups = var_413, pad = var_577_pad_0, pad_type = var_577_pad_type_0, strides = var_573, weight = blocks_2_mlp_2_weight_to_fp16, x = input_31_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_13_cast = add(x = inputs_11_cast, y = var_577_cast);
            tensor<int32, []> var_585 = const()[name = tensor<string, []>("op_585"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_586 = const()[name = tensor<string, []>("op_586"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_595 = const()[name = tensor<string, []>("op_595"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_13_cast = reduce_mean(axes = var_595, keep_dims = var_586, x = inputs_13_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_13_cast = sub(x = inputs_13_cast, y = channels_mean_13_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_13_cast = mul(x = zero_mean_13_cast, y = zero_mean_13_cast);
            tensor<int32, [1]> var_599 = const()[name = tensor<string, []>("op_599"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_600_cast = reduce_mean(axes = var_599, keep_dims = var_586, x = zero_mean_sq_13_cast);
            tensor<fp16, []> var_601_to_fp16 = const()[name = tensor<string, []>("op_601_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_602_cast = add(x = var_600_cast, y = var_601_to_fp16);
            tensor<fp16, []> denom_13_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_13_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_13_cast = rsqrt(epsilon = denom_13_epsilon_0_to_fp16, x = var_602_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_13_cast = mul(x = zero_mean_13_cast, y = denom_13_cast);
            tensor<fp16, [1, 512, 1, 1]> var_606_to_fp16 = const()[name = tensor<string, []>("op_606_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22271168)))];
            tensor<fp16, [1, 512, 1, 1500]> var_607_cast = add(x = out_13_cast, y = var_606_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_609_to_fp16 = const()[name = tensor<string, []>("op_609_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22272256)))];
            tensor<fp16, [1, 512, 1, 1500]> input_33_cast = mul(x = var_607_cast, y = var_609_to_fp16);
            tensor<int32, [2]> var_617 = const()[name = tensor<string, []>("op_617"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_619 = const()[name = tensor<string, []>("op_619"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_7_pad_type_0 = const()[name = tensor<string, []>("q_7_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_7_pad_0 = const()[name = tensor<string, []>("q_7_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> var_636_weight_0_to_fp16 = const()[name = tensor<string, []>("op_636_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22273344)))];
            tensor<fp16, [512]> var_636_bias_0_to_fp16 = const()[name = tensor<string, []>("op_636_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22797696)))];
            tensor<fp16, [1, 512, 1, 1500]> var_636_cast = conv(bias = var_636_bias_0_to_fp16, dilations = var_619, groups = var_585, pad = q_7_pad_0, pad_type = q_7_pad_type_0, strides = var_617, weight = var_636_weight_0_to_fp16, x = input_33_cast);
            tensor<int32, [2]> var_623 = const()[name = tensor<string, []>("op_623"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_625 = const()[name = tensor<string, []>("op_625"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_7_pad_type_0 = const()[name = tensor<string, []>("k_7_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_7_pad_0 = const()[name = tensor<string, []>("k_7_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_3_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22798784)))];
            tensor<fp16, [1, 512, 1, 1500]> k_7_cast = conv(dilations = var_625, groups = var_585, pad = k_7_pad_0, pad_type = k_7_pad_type_0, strides = var_623, weight = blocks_3_attn_key_weight_to_fp16, x = input_33_cast);
            tensor<int32, [2]> var_630 = const()[name = tensor<string, []>("op_630"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_632 = const()[name = tensor<string, []>("op_632"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_634_pad_type_0 = const()[name = tensor<string, []>("op_634_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_634_pad_0 = const()[name = tensor<string, []>("op_634_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_3_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(23323136)))];
            tensor<fp16, [512]> blocks_3_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(23847488)))];
            tensor<fp16, [1, 512, 1, 1500]> var_634_cast = conv(bias = blocks_3_attn_value_bias_to_fp16, dilations = var_632, groups = var_585, pad = var_634_pad_0, pad_type = var_634_pad_type_0, strides = var_630, weight = blocks_3_attn_value_weight_to_fp16, x = input_33_cast);
            tensor<int32, [8]> tile_9 = const()[name = tensor<string, []>("tile_9"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_637_axis_0 = const()[name = tensor<string, []>("op_637_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_637_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_637_cast_7 = split(axis = var_637_axis_0, split_sizes = tile_9, x = var_636_cast);
            tensor<int32, [4]> var_646_perm_0 = const()[name = tensor<string, []>("op_646_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_10 = const()[name = tensor<string, []>("tile_10"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_647_axis_0 = const()[name = tensor<string, []>("op_647_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> transpose_3 = transpose(perm = var_646_perm_0, x = k_7_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_647_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_5, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_6, tensor<fp16, [1, 1500, 1, 64]> var_647_cast_7 = split(axis = var_647_axis_0, split_sizes = tile_10, x = transpose_3);
            tensor<int32, [8]> tile_11 = const()[name = tensor<string, []>("tile_11"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_656_axis_0 = const()[name = tensor<string, []>("op_656_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_656_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_656_cast_7 = split(axis = var_656_axis_0, split_sizes = tile_11, x = var_634_cast);
            tensor<string, []> aw_49_equation_0 = const()[name = tensor<string, []>("aw_49_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_49_cast = einsum(equation = aw_49_equation_0, values = (var_647_cast_0, var_637_cast_0));
            tensor<string, []> aw_51_equation_0 = const()[name = tensor<string, []>("aw_51_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_51_cast = einsum(equation = aw_51_equation_0, values = (var_647_cast_1, var_637_cast_1));
            tensor<string, []> aw_53_equation_0 = const()[name = tensor<string, []>("aw_53_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_53_cast = einsum(equation = aw_53_equation_0, values = (var_647_cast_2, var_637_cast_2));
            tensor<string, []> aw_55_equation_0 = const()[name = tensor<string, []>("aw_55_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_55_cast = einsum(equation = aw_55_equation_0, values = (var_647_cast_3, var_637_cast_3));
            tensor<string, []> aw_57_equation_0 = const()[name = tensor<string, []>("aw_57_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_57_cast = einsum(equation = aw_57_equation_0, values = (var_647_cast_4, var_637_cast_4));
            tensor<string, []> aw_59_equation_0 = const()[name = tensor<string, []>("aw_59_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_59_cast = einsum(equation = aw_59_equation_0, values = (var_647_cast_5, var_637_cast_5));
            tensor<string, []> aw_61_equation_0 = const()[name = tensor<string, []>("aw_61_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_61_cast = einsum(equation = aw_61_equation_0, values = (var_647_cast_6, var_637_cast_6));
            tensor<string, []> aw_63_equation_0 = const()[name = tensor<string, []>("aw_63_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_63_cast = einsum(equation = aw_63_equation_0, values = (var_647_cast_7, var_637_cast_7));
            tensor<fp16, [1, 1500, 1, 1500]> var_681_cast = softmax(axis = var_585, x = aw_49_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_682_cast = softmax(axis = var_585, x = aw_51_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_683_cast = softmax(axis = var_585, x = aw_53_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_684_cast = softmax(axis = var_585, x = aw_55_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_685_cast = softmax(axis = var_585, x = aw_57_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_686_cast = softmax(axis = var_585, x = aw_59_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_687_cast = softmax(axis = var_585, x = aw_61_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_688_cast = softmax(axis = var_585, x = aw_63_cast);
            tensor<string, []> var_690_equation_0 = const()[name = tensor<string, []>("op_690_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_690_cast = einsum(equation = var_690_equation_0, values = (var_656_cast_0, var_681_cast));
            tensor<string, []> var_692_equation_0 = const()[name = tensor<string, []>("op_692_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_692_cast = einsum(equation = var_692_equation_0, values = (var_656_cast_1, var_682_cast));
            tensor<string, []> var_694_equation_0 = const()[name = tensor<string, []>("op_694_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_694_cast = einsum(equation = var_694_equation_0, values = (var_656_cast_2, var_683_cast));
            tensor<string, []> var_696_equation_0 = const()[name = tensor<string, []>("op_696_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_696_cast = einsum(equation = var_696_equation_0, values = (var_656_cast_3, var_684_cast));
            tensor<string, []> var_698_equation_0 = const()[name = tensor<string, []>("op_698_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_698_cast = einsum(equation = var_698_equation_0, values = (var_656_cast_4, var_685_cast));
            tensor<string, []> var_700_equation_0 = const()[name = tensor<string, []>("op_700_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_700_cast = einsum(equation = var_700_equation_0, values = (var_656_cast_5, var_686_cast));
            tensor<string, []> var_702_equation_0 = const()[name = tensor<string, []>("op_702_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_702_cast = einsum(equation = var_702_equation_0, values = (var_656_cast_6, var_687_cast));
            tensor<string, []> var_704_equation_0 = const()[name = tensor<string, []>("op_704_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_704_cast = einsum(equation = var_704_equation_0, values = (var_656_cast_7, var_688_cast));
            tensor<bool, []> input_35_interleave_0 = const()[name = tensor<string, []>("input_35_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_35_cast = concat(axis = var_585, interleave = input_35_interleave_0, values = (var_690_cast, var_692_cast, var_694_cast, var_696_cast, var_698_cast, var_700_cast, var_702_cast, var_704_cast));
            tensor<int32, [2]> var_709 = const()[name = tensor<string, []>("op_709"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_711 = const()[name = tensor<string, []>("op_711"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_713_pad_type_0 = const()[name = tensor<string, []>("op_713_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_713_pad_0 = const()[name = tensor<string, []>("op_713_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_3_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(23848576)))];
            tensor<fp16, [512]> blocks_3_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24372928)))];
            tensor<fp16, [1, 512, 1, 1500]> var_713_cast = conv(bias = blocks_3_attn_out_bias_to_fp16, dilations = var_711, groups = var_585, pad = var_713_pad_0, pad_type = var_713_pad_type_0, strides = var_709, weight = blocks_3_attn_out_weight_to_fp16, x = input_35_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_15_cast = add(x = inputs_13_cast, y = var_713_cast);
            tensor<int32, [1]> var_717 = const()[name = tensor<string, []>("op_717"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_15_cast = reduce_mean(axes = var_717, keep_dims = var_586, x = inputs_15_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_15_cast = sub(x = inputs_15_cast, y = channels_mean_15_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_15_cast = mul(x = zero_mean_15_cast, y = zero_mean_15_cast);
            tensor<int32, [1]> var_721 = const()[name = tensor<string, []>("op_721"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_722_cast = reduce_mean(axes = var_721, keep_dims = var_586, x = zero_mean_sq_15_cast);
            tensor<fp16, []> var_723_to_fp16 = const()[name = tensor<string, []>("op_723_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_724_cast = add(x = var_722_cast, y = var_723_to_fp16);
            tensor<fp16, []> denom_15_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_15_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_15_cast = rsqrt(epsilon = denom_15_epsilon_0_to_fp16, x = var_724_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_15_cast = mul(x = zero_mean_15_cast, y = denom_15_cast);
            tensor<fp16, [1, 512, 1, 1]> var_728_to_fp16 = const()[name = tensor<string, []>("op_728_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24374016)))];
            tensor<fp16, [1, 512, 1, 1500]> var_729_cast = add(x = out_15_cast, y = var_728_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_731_to_fp16 = const()[name = tensor<string, []>("op_731_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24375104)))];
            tensor<fp16, [1, 512, 1, 1500]> input_37_cast = mul(x = var_729_cast, y = var_731_to_fp16);
            tensor<int32, [2]> var_737 = const()[name = tensor<string, []>("op_737"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_739 = const()[name = tensor<string, []>("op_739"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_39_pad_type_0 = const()[name = tensor<string, []>("input_39_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_39_pad_0 = const()[name = tensor<string, []>("input_39_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [2048, 512, 1, 1]> blocks_3_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24376192)))];
            tensor<fp16, [2048]> blocks_3_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(26473408)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_39_cast = conv(bias = blocks_3_mlp_0_bias_to_fp16, dilations = var_739, groups = var_585, pad = input_39_pad_0, pad_type = input_39_pad_type_0, strides = var_737, weight = blocks_3_mlp_0_weight_to_fp16, x = input_37_cast);
            tensor<string, []> input_41_mode_0 = const()[name = tensor<string, []>("input_41_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_41_cast = gelu(mode = input_41_mode_0, x = input_39_cast);
            tensor<int32, [2]> var_745 = const()[name = tensor<string, []>("op_745"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_747 = const()[name = tensor<string, []>("op_747"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_749_pad_type_0 = const()[name = tensor<string, []>("op_749_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_749_pad_0 = const()[name = tensor<string, []>("op_749_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 2048, 1, 1]> blocks_3_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(26477568)))];
            tensor<fp16, [512]> blocks_3_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28574784)))];
            tensor<fp16, [1, 512, 1, 1500]> var_749_cast = conv(bias = blocks_3_mlp_2_bias_to_fp16, dilations = var_747, groups = var_585, pad = var_749_pad_0, pad_type = var_749_pad_type_0, strides = var_745, weight = blocks_3_mlp_2_weight_to_fp16, x = input_41_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_17_cast = add(x = inputs_15_cast, y = var_749_cast);
            tensor<int32, []> var_757 = const()[name = tensor<string, []>("op_757"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_758 = const()[name = tensor<string, []>("op_758"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_767 = const()[name = tensor<string, []>("op_767"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_17_cast = reduce_mean(axes = var_767, keep_dims = var_758, x = inputs_17_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_17_cast = sub(x = inputs_17_cast, y = channels_mean_17_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_17_cast = mul(x = zero_mean_17_cast, y = zero_mean_17_cast);
            tensor<int32, [1]> var_771 = const()[name = tensor<string, []>("op_771"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_772_cast = reduce_mean(axes = var_771, keep_dims = var_758, x = zero_mean_sq_17_cast);
            tensor<fp16, []> var_773_to_fp16 = const()[name = tensor<string, []>("op_773_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_774_cast = add(x = var_772_cast, y = var_773_to_fp16);
            tensor<fp16, []> denom_17_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_17_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_17_cast = rsqrt(epsilon = denom_17_epsilon_0_to_fp16, x = var_774_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_17_cast = mul(x = zero_mean_17_cast, y = denom_17_cast);
            tensor<fp16, [1, 512, 1, 1]> var_778_to_fp16 = const()[name = tensor<string, []>("op_778_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28575872)))];
            tensor<fp16, [1, 512, 1, 1500]> var_779_cast = add(x = out_17_cast, y = var_778_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_781_to_fp16 = const()[name = tensor<string, []>("op_781_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28576960)))];
            tensor<fp16, [1, 512, 1, 1500]> input_43_cast = mul(x = var_779_cast, y = var_781_to_fp16);
            tensor<int32, [2]> var_789 = const()[name = tensor<string, []>("op_789"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_791 = const()[name = tensor<string, []>("op_791"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_9_pad_type_0 = const()[name = tensor<string, []>("q_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_9_pad_0 = const()[name = tensor<string, []>("q_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> var_808_weight_0_to_fp16 = const()[name = tensor<string, []>("op_808_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28578048)))];
            tensor<fp16, [512]> var_808_bias_0_to_fp16 = const()[name = tensor<string, []>("op_808_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29102400)))];
            tensor<fp16, [1, 512, 1, 1500]> var_808_cast = conv(bias = var_808_bias_0_to_fp16, dilations = var_791, groups = var_757, pad = q_9_pad_0, pad_type = q_9_pad_type_0, strides = var_789, weight = var_808_weight_0_to_fp16, x = input_43_cast);
            tensor<int32, [2]> var_795 = const()[name = tensor<string, []>("op_795"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_797 = const()[name = tensor<string, []>("op_797"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_9_pad_type_0 = const()[name = tensor<string, []>("k_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_9_pad_0 = const()[name = tensor<string, []>("k_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_4_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29103488)))];
            tensor<fp16, [1, 512, 1, 1500]> k_9_cast = conv(dilations = var_797, groups = var_757, pad = k_9_pad_0, pad_type = k_9_pad_type_0, strides = var_795, weight = blocks_4_attn_key_weight_to_fp16, x = input_43_cast);
            tensor<int32, [2]> var_802 = const()[name = tensor<string, []>("op_802"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_804 = const()[name = tensor<string, []>("op_804"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_806_pad_type_0 = const()[name = tensor<string, []>("op_806_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_806_pad_0 = const()[name = tensor<string, []>("op_806_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_4_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29627840)))];
            tensor<fp16, [512]> blocks_4_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30152192)))];
            tensor<fp16, [1, 512, 1, 1500]> var_806_cast = conv(bias = blocks_4_attn_value_bias_to_fp16, dilations = var_804, groups = var_757, pad = var_806_pad_0, pad_type = var_806_pad_type_0, strides = var_802, weight = blocks_4_attn_value_weight_to_fp16, x = input_43_cast);
            tensor<int32, [8]> tile_12 = const()[name = tensor<string, []>("tile_12"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_809_axis_0 = const()[name = tensor<string, []>("op_809_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_809_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_809_cast_7 = split(axis = var_809_axis_0, split_sizes = tile_12, x = var_808_cast);
            tensor<int32, [4]> var_818_perm_0 = const()[name = tensor<string, []>("op_818_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_13 = const()[name = tensor<string, []>("tile_13"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_819_axis_0 = const()[name = tensor<string, []>("op_819_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> transpose_2 = transpose(perm = var_818_perm_0, x = k_9_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_819_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_5, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_6, tensor<fp16, [1, 1500, 1, 64]> var_819_cast_7 = split(axis = var_819_axis_0, split_sizes = tile_13, x = transpose_2);
            tensor<int32, [8]> tile_14 = const()[name = tensor<string, []>("tile_14"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_828_axis_0 = const()[name = tensor<string, []>("op_828_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_828_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_828_cast_7 = split(axis = var_828_axis_0, split_sizes = tile_14, x = var_806_cast);
            tensor<string, []> aw_65_equation_0 = const()[name = tensor<string, []>("aw_65_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_65_cast = einsum(equation = aw_65_equation_0, values = (var_819_cast_0, var_809_cast_0));
            tensor<string, []> aw_67_equation_0 = const()[name = tensor<string, []>("aw_67_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_67_cast = einsum(equation = aw_67_equation_0, values = (var_819_cast_1, var_809_cast_1));
            tensor<string, []> aw_69_equation_0 = const()[name = tensor<string, []>("aw_69_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_69_cast = einsum(equation = aw_69_equation_0, values = (var_819_cast_2, var_809_cast_2));
            tensor<string, []> aw_71_equation_0 = const()[name = tensor<string, []>("aw_71_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_71_cast = einsum(equation = aw_71_equation_0, values = (var_819_cast_3, var_809_cast_3));
            tensor<string, []> aw_73_equation_0 = const()[name = tensor<string, []>("aw_73_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_73_cast = einsum(equation = aw_73_equation_0, values = (var_819_cast_4, var_809_cast_4));
            tensor<string, []> aw_75_equation_0 = const()[name = tensor<string, []>("aw_75_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_75_cast = einsum(equation = aw_75_equation_0, values = (var_819_cast_5, var_809_cast_5));
            tensor<string, []> aw_77_equation_0 = const()[name = tensor<string, []>("aw_77_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_77_cast = einsum(equation = aw_77_equation_0, values = (var_819_cast_6, var_809_cast_6));
            tensor<string, []> aw_79_equation_0 = const()[name = tensor<string, []>("aw_79_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_79_cast = einsum(equation = aw_79_equation_0, values = (var_819_cast_7, var_809_cast_7));
            tensor<fp16, [1, 1500, 1, 1500]> var_853_cast = softmax(axis = var_757, x = aw_65_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_854_cast = softmax(axis = var_757, x = aw_67_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_855_cast = softmax(axis = var_757, x = aw_69_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_856_cast = softmax(axis = var_757, x = aw_71_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_857_cast = softmax(axis = var_757, x = aw_73_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_858_cast = softmax(axis = var_757, x = aw_75_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_859_cast = softmax(axis = var_757, x = aw_77_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_860_cast = softmax(axis = var_757, x = aw_79_cast);
            tensor<string, []> var_862_equation_0 = const()[name = tensor<string, []>("op_862_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_862_cast = einsum(equation = var_862_equation_0, values = (var_828_cast_0, var_853_cast));
            tensor<string, []> var_864_equation_0 = const()[name = tensor<string, []>("op_864_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_864_cast = einsum(equation = var_864_equation_0, values = (var_828_cast_1, var_854_cast));
            tensor<string, []> var_866_equation_0 = const()[name = tensor<string, []>("op_866_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_866_cast = einsum(equation = var_866_equation_0, values = (var_828_cast_2, var_855_cast));
            tensor<string, []> var_868_equation_0 = const()[name = tensor<string, []>("op_868_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_868_cast = einsum(equation = var_868_equation_0, values = (var_828_cast_3, var_856_cast));
            tensor<string, []> var_870_equation_0 = const()[name = tensor<string, []>("op_870_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_870_cast = einsum(equation = var_870_equation_0, values = (var_828_cast_4, var_857_cast));
            tensor<string, []> var_872_equation_0 = const()[name = tensor<string, []>("op_872_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_872_cast = einsum(equation = var_872_equation_0, values = (var_828_cast_5, var_858_cast));
            tensor<string, []> var_874_equation_0 = const()[name = tensor<string, []>("op_874_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_874_cast = einsum(equation = var_874_equation_0, values = (var_828_cast_6, var_859_cast));
            tensor<string, []> var_876_equation_0 = const()[name = tensor<string, []>("op_876_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_876_cast = einsum(equation = var_876_equation_0, values = (var_828_cast_7, var_860_cast));
            tensor<bool, []> input_45_interleave_0 = const()[name = tensor<string, []>("input_45_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_45_cast = concat(axis = var_757, interleave = input_45_interleave_0, values = (var_862_cast, var_864_cast, var_866_cast, var_868_cast, var_870_cast, var_872_cast, var_874_cast, var_876_cast));
            tensor<int32, [2]> var_881 = const()[name = tensor<string, []>("op_881"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_883 = const()[name = tensor<string, []>("op_883"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_885_pad_type_0 = const()[name = tensor<string, []>("op_885_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_885_pad_0 = const()[name = tensor<string, []>("op_885_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_4_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30153280)))];
            tensor<fp16, [512]> blocks_4_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30677632)))];
            tensor<fp16, [1, 512, 1, 1500]> var_885_cast = conv(bias = blocks_4_attn_out_bias_to_fp16, dilations = var_883, groups = var_757, pad = var_885_pad_0, pad_type = var_885_pad_type_0, strides = var_881, weight = blocks_4_attn_out_weight_to_fp16, x = input_45_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_19_cast = add(x = inputs_17_cast, y = var_885_cast);
            tensor<int32, [1]> var_889 = const()[name = tensor<string, []>("op_889"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_19_cast = reduce_mean(axes = var_889, keep_dims = var_758, x = inputs_19_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_19_cast = sub(x = inputs_19_cast, y = channels_mean_19_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_19_cast = mul(x = zero_mean_19_cast, y = zero_mean_19_cast);
            tensor<int32, [1]> var_893 = const()[name = tensor<string, []>("op_893"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_894_cast = reduce_mean(axes = var_893, keep_dims = var_758, x = zero_mean_sq_19_cast);
            tensor<fp16, []> var_895_to_fp16 = const()[name = tensor<string, []>("op_895_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_896_cast = add(x = var_894_cast, y = var_895_to_fp16);
            tensor<fp16, []> denom_19_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_19_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_19_cast = rsqrt(epsilon = denom_19_epsilon_0_to_fp16, x = var_896_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_19_cast = mul(x = zero_mean_19_cast, y = denom_19_cast);
            tensor<fp16, [1, 512, 1, 1]> var_900_to_fp16 = const()[name = tensor<string, []>("op_900_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30678720)))];
            tensor<fp16, [1, 512, 1, 1500]> var_901_cast = add(x = out_19_cast, y = var_900_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_903_to_fp16 = const()[name = tensor<string, []>("op_903_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30679808)))];
            tensor<fp16, [1, 512, 1, 1500]> input_47_cast = mul(x = var_901_cast, y = var_903_to_fp16);
            tensor<int32, [2]> var_909 = const()[name = tensor<string, []>("op_909"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_911 = const()[name = tensor<string, []>("op_911"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_49_pad_type_0 = const()[name = tensor<string, []>("input_49_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_49_pad_0 = const()[name = tensor<string, []>("input_49_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [2048, 512, 1, 1]> blocks_4_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30680896)))];
            tensor<fp16, [2048]> blocks_4_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(32778112)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_49_cast = conv(bias = blocks_4_mlp_0_bias_to_fp16, dilations = var_911, groups = var_757, pad = input_49_pad_0, pad_type = input_49_pad_type_0, strides = var_909, weight = blocks_4_mlp_0_weight_to_fp16, x = input_47_cast);
            tensor<string, []> input_51_mode_0 = const()[name = tensor<string, []>("input_51_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_51_cast = gelu(mode = input_51_mode_0, x = input_49_cast);
            tensor<int32, [2]> var_917 = const()[name = tensor<string, []>("op_917"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_919 = const()[name = tensor<string, []>("op_919"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_921_pad_type_0 = const()[name = tensor<string, []>("op_921_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_921_pad_0 = const()[name = tensor<string, []>("op_921_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 2048, 1, 1]> blocks_4_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(32782272)))];
            tensor<fp16, [512]> blocks_4_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34879488)))];
            tensor<fp16, [1, 512, 1, 1500]> var_921_cast = conv(bias = blocks_4_mlp_2_bias_to_fp16, dilations = var_919, groups = var_757, pad = var_921_pad_0, pad_type = var_921_pad_type_0, strides = var_917, weight = blocks_4_mlp_2_weight_to_fp16, x = input_51_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_21_cast = add(x = inputs_19_cast, y = var_921_cast);
            tensor<int32, []> var_929 = const()[name = tensor<string, []>("op_929"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_930 = const()[name = tensor<string, []>("op_930"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_939 = const()[name = tensor<string, []>("op_939"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_21_cast = reduce_mean(axes = var_939, keep_dims = var_930, x = inputs_21_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_21_cast = sub(x = inputs_21_cast, y = channels_mean_21_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_21_cast = mul(x = zero_mean_21_cast, y = zero_mean_21_cast);
            tensor<int32, [1]> var_943 = const()[name = tensor<string, []>("op_943"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_944_cast = reduce_mean(axes = var_943, keep_dims = var_930, x = zero_mean_sq_21_cast);
            tensor<fp16, []> var_945_to_fp16 = const()[name = tensor<string, []>("op_945_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_946_cast = add(x = var_944_cast, y = var_945_to_fp16);
            tensor<fp16, []> denom_21_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_21_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_21_cast = rsqrt(epsilon = denom_21_epsilon_0_to_fp16, x = var_946_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_21_cast = mul(x = zero_mean_21_cast, y = denom_21_cast);
            tensor<fp16, [1, 512, 1, 1]> var_950_to_fp16 = const()[name = tensor<string, []>("op_950_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34880576)))];
            tensor<fp16, [1, 512, 1, 1500]> var_951_cast = add(x = out_21_cast, y = var_950_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_953_to_fp16 = const()[name = tensor<string, []>("op_953_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34881664)))];
            tensor<fp16, [1, 512, 1, 1500]> input_53_cast = mul(x = var_951_cast, y = var_953_to_fp16);
            tensor<int32, [2]> var_961 = const()[name = tensor<string, []>("op_961"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_963 = const()[name = tensor<string, []>("op_963"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_pad_type_0 = const()[name = tensor<string, []>("q_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_pad_0 = const()[name = tensor<string, []>("q_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> var_980_weight_0_to_fp16 = const()[name = tensor<string, []>("op_980_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34882752)))];
            tensor<fp16, [512]> var_980_bias_0_to_fp16 = const()[name = tensor<string, []>("op_980_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35407104)))];
            tensor<fp16, [1, 512, 1, 1500]> var_980_cast = conv(bias = var_980_bias_0_to_fp16, dilations = var_963, groups = var_929, pad = q_pad_0, pad_type = q_pad_type_0, strides = var_961, weight = var_980_weight_0_to_fp16, x = input_53_cast);
            tensor<int32, [2]> var_967 = const()[name = tensor<string, []>("op_967"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_969 = const()[name = tensor<string, []>("op_969"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_pad_type_0 = const()[name = tensor<string, []>("k_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_pad_0 = const()[name = tensor<string, []>("k_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_5_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35408192)))];
            tensor<fp16, [1, 512, 1, 1500]> k_cast = conv(dilations = var_969, groups = var_929, pad = k_pad_0, pad_type = k_pad_type_0, strides = var_967, weight = blocks_5_attn_key_weight_to_fp16, x = input_53_cast);
            tensor<int32, [2]> var_974 = const()[name = tensor<string, []>("op_974"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_976 = const()[name = tensor<string, []>("op_976"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_978_pad_type_0 = const()[name = tensor<string, []>("op_978_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_978_pad_0 = const()[name = tensor<string, []>("op_978_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_5_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35932544)))];
            tensor<fp16, [512]> blocks_5_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36456896)))];
            tensor<fp16, [1, 512, 1, 1500]> var_978_cast = conv(bias = blocks_5_attn_value_bias_to_fp16, dilations = var_976, groups = var_929, pad = var_978_pad_0, pad_type = var_978_pad_type_0, strides = var_974, weight = blocks_5_attn_value_weight_to_fp16, x = input_53_cast);
            tensor<int32, [8]> tile_15 = const()[name = tensor<string, []>("tile_15"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_981_axis_0 = const()[name = tensor<string, []>("op_981_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_981_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_981_cast_7 = split(axis = var_981_axis_0, split_sizes = tile_15, x = var_980_cast);
            tensor<int32, [4]> var_990_perm_0 = const()[name = tensor<string, []>("op_990_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_16 = const()[name = tensor<string, []>("tile_16"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_991_axis_0 = const()[name = tensor<string, []>("op_991_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> transpose_1 = transpose(perm = var_990_perm_0, x = k_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_991_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_5, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_6, tensor<fp16, [1, 1500, 1, 64]> var_991_cast_7 = split(axis = var_991_axis_0, split_sizes = tile_16, x = transpose_1);
            tensor<int32, [8]> tile_17 = const()[name = tensor<string, []>("tile_17"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_1000_axis_0 = const()[name = tensor<string, []>("op_1000_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_5, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_6, tensor<fp16, [1, 64, 1, 1500]> var_1000_cast_7 = split(axis = var_1000_axis_0, split_sizes = tile_17, x = var_978_cast);
            tensor<string, []> aw_81_equation_0 = const()[name = tensor<string, []>("aw_81_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_81_cast = einsum(equation = aw_81_equation_0, values = (var_991_cast_0, var_981_cast_0));
            tensor<string, []> aw_83_equation_0 = const()[name = tensor<string, []>("aw_83_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_83_cast = einsum(equation = aw_83_equation_0, values = (var_991_cast_1, var_981_cast_1));
            tensor<string, []> aw_85_equation_0 = const()[name = tensor<string, []>("aw_85_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_85_cast = einsum(equation = aw_85_equation_0, values = (var_991_cast_2, var_981_cast_2));
            tensor<string, []> aw_87_equation_0 = const()[name = tensor<string, []>("aw_87_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_87_cast = einsum(equation = aw_87_equation_0, values = (var_991_cast_3, var_981_cast_3));
            tensor<string, []> aw_89_equation_0 = const()[name = tensor<string, []>("aw_89_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_89_cast = einsum(equation = aw_89_equation_0, values = (var_991_cast_4, var_981_cast_4));
            tensor<string, []> aw_91_equation_0 = const()[name = tensor<string, []>("aw_91_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_91_cast = einsum(equation = aw_91_equation_0, values = (var_991_cast_5, var_981_cast_5));
            tensor<string, []> aw_93_equation_0 = const()[name = tensor<string, []>("aw_93_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_93_cast = einsum(equation = aw_93_equation_0, values = (var_991_cast_6, var_981_cast_6));
            tensor<string, []> aw_equation_0 = const()[name = tensor<string, []>("aw_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_cast = einsum(equation = aw_equation_0, values = (var_991_cast_7, var_981_cast_7));
            tensor<fp16, [1, 1500, 1, 1500]> var_1025_cast = softmax(axis = var_929, x = aw_81_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1026_cast = softmax(axis = var_929, x = aw_83_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1027_cast = softmax(axis = var_929, x = aw_85_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1028_cast = softmax(axis = var_929, x = aw_87_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1029_cast = softmax(axis = var_929, x = aw_89_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1030_cast = softmax(axis = var_929, x = aw_91_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1031_cast = softmax(axis = var_929, x = aw_93_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_1032_cast = softmax(axis = var_929, x = aw_cast);
            tensor<string, []> var_1034_equation_0 = const()[name = tensor<string, []>("op_1034_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1034_cast = einsum(equation = var_1034_equation_0, values = (var_1000_cast_0, var_1025_cast));
            tensor<string, []> var_1036_equation_0 = const()[name = tensor<string, []>("op_1036_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1036_cast = einsum(equation = var_1036_equation_0, values = (var_1000_cast_1, var_1026_cast));
            tensor<string, []> var_1038_equation_0 = const()[name = tensor<string, []>("op_1038_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1038_cast = einsum(equation = var_1038_equation_0, values = (var_1000_cast_2, var_1027_cast));
            tensor<string, []> var_1040_equation_0 = const()[name = tensor<string, []>("op_1040_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1040_cast = einsum(equation = var_1040_equation_0, values = (var_1000_cast_3, var_1028_cast));
            tensor<string, []> var_1042_equation_0 = const()[name = tensor<string, []>("op_1042_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1042_cast = einsum(equation = var_1042_equation_0, values = (var_1000_cast_4, var_1029_cast));
            tensor<string, []> var_1044_equation_0 = const()[name = tensor<string, []>("op_1044_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1044_cast = einsum(equation = var_1044_equation_0, values = (var_1000_cast_5, var_1030_cast));
            tensor<string, []> var_1046_equation_0 = const()[name = tensor<string, []>("op_1046_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1046_cast = einsum(equation = var_1046_equation_0, values = (var_1000_cast_6, var_1031_cast));
            tensor<string, []> var_1048_equation_0 = const()[name = tensor<string, []>("op_1048_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1048_cast = einsum(equation = var_1048_equation_0, values = (var_1000_cast_7, var_1032_cast));
            tensor<bool, []> input_55_interleave_0 = const()[name = tensor<string, []>("input_55_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_55_cast = concat(axis = var_929, interleave = input_55_interleave_0, values = (var_1034_cast, var_1036_cast, var_1038_cast, var_1040_cast, var_1042_cast, var_1044_cast, var_1046_cast, var_1048_cast));
            tensor<int32, [2]> var_1053 = const()[name = tensor<string, []>("op_1053"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_1055 = const()[name = tensor<string, []>("op_1055"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_1057_pad_type_0 = const()[name = tensor<string, []>("op_1057_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_1057_pad_0 = const()[name = tensor<string, []>("op_1057_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 512, 1, 1]> blocks_5_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36457984)))];
            tensor<fp16, [512]> blocks_5_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36982336)))];
            tensor<fp16, [1, 512, 1, 1500]> var_1057_cast = conv(bias = blocks_5_attn_out_bias_to_fp16, dilations = var_1055, groups = var_929, pad = var_1057_pad_0, pad_type = var_1057_pad_type_0, strides = var_1053, weight = blocks_5_attn_out_weight_to_fp16, x = input_55_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_23_cast = add(x = inputs_21_cast, y = var_1057_cast);
            tensor<int32, [1]> var_1061 = const()[name = tensor<string, []>("op_1061"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_23_cast = reduce_mean(axes = var_1061, keep_dims = var_930, x = inputs_23_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_23_cast = sub(x = inputs_23_cast, y = channels_mean_23_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_23_cast = mul(x = zero_mean_23_cast, y = zero_mean_23_cast);
            tensor<int32, [1]> var_1065 = const()[name = tensor<string, []>("op_1065"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_1066_cast = reduce_mean(axes = var_1065, keep_dims = var_930, x = zero_mean_sq_23_cast);
            tensor<fp16, []> var_1067_to_fp16 = const()[name = tensor<string, []>("op_1067_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_1068_cast = add(x = var_1066_cast, y = var_1067_to_fp16);
            tensor<fp16, []> denom_23_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_23_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_23_cast = rsqrt(epsilon = denom_23_epsilon_0_to_fp16, x = var_1068_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_23_cast = mul(x = zero_mean_23_cast, y = denom_23_cast);
            tensor<fp16, [1, 512, 1, 1]> var_1072_to_fp16 = const()[name = tensor<string, []>("op_1072_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36983424)))];
            tensor<fp16, [1, 512, 1, 1500]> var_1073_cast = add(x = out_23_cast, y = var_1072_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_1075_to_fp16 = const()[name = tensor<string, []>("op_1075_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36984512)))];
            tensor<fp16, [1, 512, 1, 1500]> input_57_cast = mul(x = var_1073_cast, y = var_1075_to_fp16);
            tensor<int32, [2]> var_1081 = const()[name = tensor<string, []>("op_1081"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_1083 = const()[name = tensor<string, []>("op_1083"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_59_pad_type_0 = const()[name = tensor<string, []>("input_59_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_59_pad_0 = const()[name = tensor<string, []>("input_59_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [2048, 512, 1, 1]> blocks_5_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36985600)))];
            tensor<fp16, [2048]> blocks_5_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39082816)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_59_cast = conv(bias = blocks_5_mlp_0_bias_to_fp16, dilations = var_1083, groups = var_929, pad = input_59_pad_0, pad_type = input_59_pad_type_0, strides = var_1081, weight = blocks_5_mlp_0_weight_to_fp16, x = input_57_cast);
            tensor<string, []> input_mode_0 = const()[name = tensor<string, []>("input_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_cast = gelu(mode = input_mode_0, x = input_59_cast);
            tensor<int32, [2]> var_1089 = const()[name = tensor<string, []>("op_1089"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_1091 = const()[name = tensor<string, []>("op_1091"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_1093_pad_type_0 = const()[name = tensor<string, []>("op_1093_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_1093_pad_0 = const()[name = tensor<string, []>("op_1093_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [512, 2048, 1, 1]> blocks_5_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39086976)))];
            tensor<fp16, [512]> blocks_5_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(41184192)))];
            tensor<fp16, [1, 512, 1, 1500]> var_1093_cast = conv(bias = blocks_5_mlp_2_bias_to_fp16, dilations = var_1091, groups = var_929, pad = var_1093_pad_0, pad_type = var_1093_pad_type_0, strides = var_1089, weight = blocks_5_mlp_2_weight_to_fp16, x = input_cast);
            tensor<fp16, [1, 512, 1, 1500]> inputs_cast = add(x = inputs_23_cast, y = var_1093_cast);
            tensor<bool, []> var_1097 = const()[name = tensor<string, []>("op_1097"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_1101 = const()[name = tensor<string, []>("op_1101"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_cast = reduce_mean(axes = var_1101, keep_dims = var_1097, x = inputs_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_cast = sub(x = inputs_cast, y = channels_mean_cast);
            tensor<fp16, [1, 512, 1, 1500]> zero_mean_sq_cast = mul(x = zero_mean_cast, y = zero_mean_cast);
            tensor<int32, [1]> var_1105 = const()[name = tensor<string, []>("op_1105"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_1106_cast = reduce_mean(axes = var_1105, keep_dims = var_1097, x = zero_mean_sq_cast);
            tensor<fp16, []> var_1107_to_fp16 = const()[name = tensor<string, []>("op_1107_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_1108_cast = add(x = var_1106_cast, y = var_1107_to_fp16);
            tensor<fp16, []> denom_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_cast = rsqrt(epsilon = denom_epsilon_0_to_fp16, x = var_1108_cast);
            tensor<fp16, [1, 512, 1, 1500]> out_25_cast = mul(x = zero_mean_cast, y = denom_cast);
            tensor<fp16, [1, 512, 1, 1]> var_1112_to_fp16 = const()[name = tensor<string, []>("op_1112_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(41185280)))];
            tensor<fp16, [1, 512, 1, 1500]> var_1113_cast = add(x = out_25_cast, y = var_1112_to_fp16);
            tensor<fp16, [1, 512, 1, 1]> var_1115_to_fp16 = const()[name = tensor<string, []>("op_1115_to_fp16"), val = tensor<fp16, [1, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(41186368)))];
            tensor<fp16, [1, 512, 1, 1500]> x_cast = mul(x = var_1113_cast, y = var_1115_to_fp16);
            tensor<int32, [1]> var_1118_axes_0 = const()[name = tensor<string, []>("op_1118_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 512, 1500]> var_1118_cast = squeeze(axes = var_1118_axes_0, x = x_cast);
            tensor<int32, [3]> var_1121_perm_0 = const()[name = tensor<string, []>("op_1121_perm_0"), val = tensor<int32, [3]>([0, 2, 1])];
            tensor<string, []> var_1121_cast_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_1121_cast_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp16, [1, 1500, 512]> transpose_0 = transpose(perm = var_1121_perm_0, x = var_1118_cast);
            tensor<fp32, [1, 1500, 512]> output = cast(dtype = var_1121_cast_to_fp32_dtype_0, x = transpose_0);
        } -> (output);
}