program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "5.33.5"}, {"coremlc-version", "1877.40.3"}})]
{
    func main<ios15>(tensor<fp32, [1, 80, 3000]> logmel_data) {
            tensor<int32, []> var_16 = const()[name = tensor<string, []>("op_16"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_24 = const()[name = tensor<string, []>("op_24"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_26 = const()[name = tensor<string, []>("op_26"), val = tensor<int32, [1]>([1])];
            tensor<string, []> var_28_pad_type_0 = const()[name = tensor<string, []>("op_28_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_28_pad_0 = const()[name = tensor<string, []>("op_28_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> logmel_data_to_fp16_dtype_0 = const()[name = tensor<string, []>("logmel_data_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [384, 80, 3]> weight_3_to_fp16 = const()[name = tensor<string, []>("weight_3_to_fp16"), val = tensor<fp16, [384, 80, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [384]> bias_3_to_fp16 = const()[name = tensor<string, []>("bias_3_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(184448)))];
            tensor<fp16, [1, 80, 3000]> cast_295 = cast(dtype = logmel_data_to_fp16_dtype_0, x = logmel_data);
            tensor<fp16, [1, 384, 3000]> var_28_cast = conv(bias = bias_3_to_fp16, dilations = var_26, groups = var_16, pad = var_28_pad_0, pad_type = var_28_pad_type_0, strides = var_24, weight = weight_3_to_fp16, x = cast_295);
            tensor<string, []> input_1_mode_0 = const()[name = tensor<string, []>("input_1_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 3000]> input_1_cast = gelu(mode = input_1_mode_0, x = var_28_cast);
            tensor<int32, []> var_32 = const()[name = tensor<string, []>("op_32"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_41 = const()[name = tensor<string, []>("op_41"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> var_43 = const()[name = tensor<string, []>("op_43"), val = tensor<int32, [1]>([1])];
            tensor<string, []> var_45_pad_type_0 = const()[name = tensor<string, []>("op_45_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_45_pad_0 = const()[name = tensor<string, []>("op_45_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [384, 384, 3]> weight_7_to_fp16 = const()[name = tensor<string, []>("weight_7_to_fp16"), val = tensor<fp16, [384, 384, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(185280)))];
            tensor<fp16, [384]> bias_7_to_fp16 = const()[name = tensor<string, []>("bias_7_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1070080)))];
            tensor<fp16, [1, 384, 1500]> var_45_cast = conv(bias = bias_7_to_fp16, dilations = var_43, groups = var_32, pad = var_45_pad_0, pad_type = var_45_pad_type_0, strides = var_41, weight = weight_7_to_fp16, x = input_1_cast);
            tensor<string, []> x_3_mode_0 = const()[name = tensor<string, []>("x_3_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 1500]> x_3_cast = gelu(mode = x_3_mode_0, x = var_45_cast);
            tensor<fp16, [384, 1500]> var_49_to_fp16 = const()[name = tensor<string, []>("op_49_to_fp16"), val = tensor<fp16, [384, 1500]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1070912)))];
            tensor<fp16, [1, 384, 1500]> var_51_cast = add(x = x_3_cast, y = var_49_to_fp16);
            tensor<int32, [1]> inputs_1_axes_0 = const()[name = tensor<string, []>("inputs_1_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 384, 1, 1500]> inputs_1_cast = expand_dims(axes = inputs_1_axes_0, x = var_51_cast);
            tensor<int32, []> var_65 = const()[name = tensor<string, []>("op_65"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_66 = const()[name = tensor<string, []>("op_66"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_75 = const()[name = tensor<string, []>("op_75"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_1_cast = reduce_mean(axes = var_75, keep_dims = var_66, x = inputs_1_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_1_cast = sub(x = inputs_1_cast, y = channels_mean_1_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_1_cast = mul(x = zero_mean_1_cast, y = zero_mean_1_cast);
            tensor<int32, [1]> var_79 = const()[name = tensor<string, []>("op_79"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_80_cast = reduce_mean(axes = var_79, keep_dims = var_66, x = zero_mean_sq_1_cast);
            tensor<fp16, []> var_81_to_fp16 = const()[name = tensor<string, []>("op_81_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_82_cast = add(x = var_80_cast, y = var_81_to_fp16);
            tensor<fp16, []> denom_1_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_1_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_1_cast = rsqrt(epsilon = denom_1_epsilon_0_to_fp16, x = var_82_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_1_cast = mul(x = zero_mean_1_cast, y = denom_1_cast);
            tensor<fp16, [1, 384, 1, 1]> var_86_to_fp16 = const()[name = tensor<string, []>("op_86_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2222976)))];
            tensor<fp16, [1, 384, 1, 1500]> var_87_cast = add(x = out_1_cast, y = var_86_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_89_to_fp16 = const()[name = tensor<string, []>("op_89_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2223808)))];
            tensor<fp16, [1, 384, 1, 1500]> input_3_cast = mul(x = var_87_cast, y = var_89_to_fp16);
            tensor<int32, [2]> var_97 = const()[name = tensor<string, []>("op_97"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_99 = const()[name = tensor<string, []>("op_99"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_1_pad_type_0 = const()[name = tensor<string, []>("q_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_1_pad_0 = const()[name = tensor<string, []>("q_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_116_weight_0_to_fp16 = const()[name = tensor<string, []>("op_116_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2224640)))];
            tensor<fp16, [384]> var_116_bias_0_to_fp16 = const()[name = tensor<string, []>("op_116_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2519616)))];
            tensor<fp16, [1, 384, 1, 1500]> var_116_cast = conv(bias = var_116_bias_0_to_fp16, dilations = var_99, groups = var_65, pad = q_1_pad_0, pad_type = q_1_pad_type_0, strides = var_97, weight = var_116_weight_0_to_fp16, x = input_3_cast);
            tensor<int32, [2]> var_103 = const()[name = tensor<string, []>("op_103"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_105 = const()[name = tensor<string, []>("op_105"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_1_pad_type_0 = const()[name = tensor<string, []>("k_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_1_pad_0 = const()[name = tensor<string, []>("k_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_0_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2520448)))];
            tensor<fp16, [1, 384, 1, 1500]> k_1_cast = conv(dilations = var_105, groups = var_65, pad = k_1_pad_0, pad_type = k_1_pad_type_0, strides = var_103, weight = blocks_0_attn_key_weight_to_fp16, x = input_3_cast);
            tensor<int32, [2]> var_110 = const()[name = tensor<string, []>("op_110"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_112 = const()[name = tensor<string, []>("op_112"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_114_pad_type_0 = const()[name = tensor<string, []>("op_114_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_114_pad_0 = const()[name = tensor<string, []>("op_114_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_0_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2815424)))];
            tensor<fp16, [384]> blocks_0_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3110400)))];
            tensor<fp16, [1, 384, 1, 1500]> var_114_cast = conv(bias = blocks_0_attn_value_bias_to_fp16, dilations = var_112, groups = var_65, pad = var_114_pad_0, pad_type = var_114_pad_type_0, strides = var_110, weight = blocks_0_attn_value_weight_to_fp16, x = input_3_cast);
            tensor<int32, [6]> tile_0 = const()[name = tensor<string, []>("tile_0"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_117_axis_0 = const()[name = tensor<string, []>("op_117_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_117_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_117_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_117_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_117_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_117_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_117_cast_5 = split(axis = var_117_axis_0, split_sizes = tile_0, x = var_116_cast);
            tensor<int32, [4]> var_124_perm_0 = const()[name = tensor<string, []>("op_124_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_1 = const()[name = tensor<string, []>("tile_1"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_125_axis_0 = const()[name = tensor<string, []>("op_125_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_4 = transpose(perm = var_124_perm_0, x = k_1_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_125_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_125_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_125_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_125_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_125_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_125_cast_5 = split(axis = var_125_axis_0, split_sizes = tile_1, x = transpose_4);
            tensor<int32, [6]> tile_2 = const()[name = tensor<string, []>("tile_2"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_132_axis_0 = const()[name = tensor<string, []>("op_132_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_132_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_132_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_132_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_132_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_132_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_132_cast_5 = split(axis = var_132_axis_0, split_sizes = tile_2, x = var_114_cast);
            tensor<string, []> aw_1_equation_0 = const()[name = tensor<string, []>("aw_1_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_1_cast = einsum(equation = aw_1_equation_0, values = (var_125_cast_0, var_117_cast_0));
            tensor<string, []> aw_3_equation_0 = const()[name = tensor<string, []>("aw_3_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_3_cast = einsum(equation = aw_3_equation_0, values = (var_125_cast_1, var_117_cast_1));
            tensor<string, []> aw_5_equation_0 = const()[name = tensor<string, []>("aw_5_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_5_cast = einsum(equation = aw_5_equation_0, values = (var_125_cast_2, var_117_cast_2));
            tensor<string, []> aw_7_equation_0 = const()[name = tensor<string, []>("aw_7_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_7_cast = einsum(equation = aw_7_equation_0, values = (var_125_cast_3, var_117_cast_3));
            tensor<string, []> aw_9_equation_0 = const()[name = tensor<string, []>("aw_9_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_9_cast = einsum(equation = aw_9_equation_0, values = (var_125_cast_4, var_117_cast_4));
            tensor<string, []> aw_11_equation_0 = const()[name = tensor<string, []>("aw_11_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_11_cast = einsum(equation = aw_11_equation_0, values = (var_125_cast_5, var_117_cast_5));
            tensor<fp16, [1, 1500, 1, 1500]> var_151_cast = softmax(axis = var_65, x = aw_1_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_152_cast = softmax(axis = var_65, x = aw_3_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_153_cast = softmax(axis = var_65, x = aw_5_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_154_cast = softmax(axis = var_65, x = aw_7_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_155_cast = softmax(axis = var_65, x = aw_9_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_156_cast = softmax(axis = var_65, x = aw_11_cast);
            tensor<string, []> var_158_equation_0 = const()[name = tensor<string, []>("op_158_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_158_cast = einsum(equation = var_158_equation_0, values = (var_132_cast_0, var_151_cast));
            tensor<string, []> var_160_equation_0 = const()[name = tensor<string, []>("op_160_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_160_cast = einsum(equation = var_160_equation_0, values = (var_132_cast_1, var_152_cast));
            tensor<string, []> var_162_equation_0 = const()[name = tensor<string, []>("op_162_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_162_cast = einsum(equation = var_162_equation_0, values = (var_132_cast_2, var_153_cast));
            tensor<string, []> var_164_equation_0 = const()[name = tensor<string, []>("op_164_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_164_cast = einsum(equation = var_164_equation_0, values = (var_132_cast_3, var_154_cast));
            tensor<string, []> var_166_equation_0 = const()[name = tensor<string, []>("op_166_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_166_cast = einsum(equation = var_166_equation_0, values = (var_132_cast_4, var_155_cast));
            tensor<string, []> var_168_equation_0 = const()[name = tensor<string, []>("op_168_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_168_cast = einsum(equation = var_168_equation_0, values = (var_132_cast_5, var_156_cast));
            tensor<bool, []> input_5_interleave_0 = const()[name = tensor<string, []>("input_5_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_5_cast = concat(axis = var_65, interleave = input_5_interleave_0, values = (var_158_cast, var_160_cast, var_162_cast, var_164_cast, var_166_cast, var_168_cast));
            tensor<int32, [2]> var_173 = const()[name = tensor<string, []>("op_173"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_175 = const()[name = tensor<string, []>("op_175"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_177_pad_type_0 = const()[name = tensor<string, []>("op_177_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_177_pad_0 = const()[name = tensor<string, []>("op_177_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_0_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3111232)))];
            tensor<fp16, [384]> blocks_0_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3406208)))];
            tensor<fp16, [1, 384, 1, 1500]> var_177_cast = conv(bias = blocks_0_attn_out_bias_to_fp16, dilations = var_175, groups = var_65, pad = var_177_pad_0, pad_type = var_177_pad_type_0, strides = var_173, weight = blocks_0_attn_out_weight_to_fp16, x = input_5_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_3_cast = add(x = inputs_1_cast, y = var_177_cast);
            tensor<int32, [1]> var_181 = const()[name = tensor<string, []>("op_181"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_3_cast = reduce_mean(axes = var_181, keep_dims = var_66, x = inputs_3_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_3_cast = sub(x = inputs_3_cast, y = channels_mean_3_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_3_cast = mul(x = zero_mean_3_cast, y = zero_mean_3_cast);
            tensor<int32, [1]> var_185 = const()[name = tensor<string, []>("op_185"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_186_cast = reduce_mean(axes = var_185, keep_dims = var_66, x = zero_mean_sq_3_cast);
            tensor<fp16, []> var_187_to_fp16 = const()[name = tensor<string, []>("op_187_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_188_cast = add(x = var_186_cast, y = var_187_to_fp16);
            tensor<fp16, []> denom_3_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_3_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_3_cast = rsqrt(epsilon = denom_3_epsilon_0_to_fp16, x = var_188_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_3_cast = mul(x = zero_mean_3_cast, y = denom_3_cast);
            tensor<fp16, [1, 384, 1, 1]> var_192_to_fp16 = const()[name = tensor<string, []>("op_192_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3407040)))];
            tensor<fp16, [1, 384, 1, 1500]> var_193_cast = add(x = out_3_cast, y = var_192_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_195_to_fp16 = const()[name = tensor<string, []>("op_195_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3407872)))];
            tensor<fp16, [1, 384, 1, 1500]> input_7_cast = mul(x = var_193_cast, y = var_195_to_fp16);
            tensor<int32, [2]> var_201 = const()[name = tensor<string, []>("op_201"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_203 = const()[name = tensor<string, []>("op_203"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_0_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3408704)))];
            tensor<fp16, [1536]> blocks_0_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4588416)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_9_cast = conv(bias = blocks_0_mlp_0_bias_to_fp16, dilations = var_203, groups = var_65, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = var_201, weight = blocks_0_mlp_0_weight_to_fp16, x = input_7_cast);
            tensor<string, []> input_11_mode_0 = const()[name = tensor<string, []>("input_11_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_11_cast = gelu(mode = input_11_mode_0, x = input_9_cast);
            tensor<int32, [2]> var_209 = const()[name = tensor<string, []>("op_209"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_211 = const()[name = tensor<string, []>("op_211"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_213_pad_type_0 = const()[name = tensor<string, []>("op_213_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_213_pad_0 = const()[name = tensor<string, []>("op_213_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_0_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4591552)))];
            tensor<fp16, [384]> blocks_0_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5771264)))];
            tensor<fp16, [1, 384, 1, 1500]> var_213_cast = conv(bias = blocks_0_mlp_2_bias_to_fp16, dilations = var_211, groups = var_65, pad = var_213_pad_0, pad_type = var_213_pad_type_0, strides = var_209, weight = blocks_0_mlp_2_weight_to_fp16, x = input_11_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_5_cast = add(x = inputs_3_cast, y = var_213_cast);
            tensor<int32, []> var_221 = const()[name = tensor<string, []>("op_221"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_222 = const()[name = tensor<string, []>("op_222"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_231 = const()[name = tensor<string, []>("op_231"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_5_cast = reduce_mean(axes = var_231, keep_dims = var_222, x = inputs_5_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_5_cast = sub(x = inputs_5_cast, y = channels_mean_5_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_5_cast = mul(x = zero_mean_5_cast, y = zero_mean_5_cast);
            tensor<int32, [1]> var_235 = const()[name = tensor<string, []>("op_235"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_236_cast = reduce_mean(axes = var_235, keep_dims = var_222, x = zero_mean_sq_5_cast);
            tensor<fp16, []> var_237_to_fp16 = const()[name = tensor<string, []>("op_237_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_238_cast = add(x = var_236_cast, y = var_237_to_fp16);
            tensor<fp16, []> denom_5_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_5_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_5_cast = rsqrt(epsilon = denom_5_epsilon_0_to_fp16, x = var_238_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_5_cast = mul(x = zero_mean_5_cast, y = denom_5_cast);
            tensor<fp16, [1, 384, 1, 1]> var_242_to_fp16 = const()[name = tensor<string, []>("op_242_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5772096)))];
            tensor<fp16, [1, 384, 1, 1500]> var_243_cast = add(x = out_5_cast, y = var_242_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_245_to_fp16 = const()[name = tensor<string, []>("op_245_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5772928)))];
            tensor<fp16, [1, 384, 1, 1500]> input_13_cast = mul(x = var_243_cast, y = var_245_to_fp16);
            tensor<int32, [2]> var_253 = const()[name = tensor<string, []>("op_253"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_255 = const()[name = tensor<string, []>("op_255"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_3_pad_type_0 = const()[name = tensor<string, []>("q_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_3_pad_0 = const()[name = tensor<string, []>("q_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_272_weight_0_to_fp16 = const()[name = tensor<string, []>("op_272_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5773760)))];
            tensor<fp16, [384]> var_272_bias_0_to_fp16 = const()[name = tensor<string, []>("op_272_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6068736)))];
            tensor<fp16, [1, 384, 1, 1500]> var_272_cast = conv(bias = var_272_bias_0_to_fp16, dilations = var_255, groups = var_221, pad = q_3_pad_0, pad_type = q_3_pad_type_0, strides = var_253, weight = var_272_weight_0_to_fp16, x = input_13_cast);
            tensor<int32, [2]> var_259 = const()[name = tensor<string, []>("op_259"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_261 = const()[name = tensor<string, []>("op_261"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_3_pad_type_0 = const()[name = tensor<string, []>("k_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_3_pad_0 = const()[name = tensor<string, []>("k_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_1_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6069568)))];
            tensor<fp16, [1, 384, 1, 1500]> k_3_cast = conv(dilations = var_261, groups = var_221, pad = k_3_pad_0, pad_type = k_3_pad_type_0, strides = var_259, weight = blocks_1_attn_key_weight_to_fp16, x = input_13_cast);
            tensor<int32, [2]> var_266 = const()[name = tensor<string, []>("op_266"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_268 = const()[name = tensor<string, []>("op_268"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_270_pad_type_0 = const()[name = tensor<string, []>("op_270_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_270_pad_0 = const()[name = tensor<string, []>("op_270_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_1_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6364544)))];
            tensor<fp16, [384]> blocks_1_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6659520)))];
            tensor<fp16, [1, 384, 1, 1500]> var_270_cast = conv(bias = blocks_1_attn_value_bias_to_fp16, dilations = var_268, groups = var_221, pad = var_270_pad_0, pad_type = var_270_pad_type_0, strides = var_266, weight = blocks_1_attn_value_weight_to_fp16, x = input_13_cast);
            tensor<int32, [6]> tile_3 = const()[name = tensor<string, []>("tile_3"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_273_axis_0 = const()[name = tensor<string, []>("op_273_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_273_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_273_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_273_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_273_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_273_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_273_cast_5 = split(axis = var_273_axis_0, split_sizes = tile_3, x = var_272_cast);
            tensor<int32, [4]> var_280_perm_0 = const()[name = tensor<string, []>("op_280_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_4 = const()[name = tensor<string, []>("tile_4"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_281_axis_0 = const()[name = tensor<string, []>("op_281_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_3 = transpose(perm = var_280_perm_0, x = k_3_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_281_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_281_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_281_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_281_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_281_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_281_cast_5 = split(axis = var_281_axis_0, split_sizes = tile_4, x = transpose_3);
            tensor<int32, [6]> tile_5 = const()[name = tensor<string, []>("tile_5"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_288_axis_0 = const()[name = tensor<string, []>("op_288_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_288_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_288_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_288_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_288_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_288_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_288_cast_5 = split(axis = var_288_axis_0, split_sizes = tile_5, x = var_270_cast);
            tensor<string, []> aw_13_equation_0 = const()[name = tensor<string, []>("aw_13_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_13_cast = einsum(equation = aw_13_equation_0, values = (var_281_cast_0, var_273_cast_0));
            tensor<string, []> aw_15_equation_0 = const()[name = tensor<string, []>("aw_15_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_15_cast = einsum(equation = aw_15_equation_0, values = (var_281_cast_1, var_273_cast_1));
            tensor<string, []> aw_17_equation_0 = const()[name = tensor<string, []>("aw_17_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_17_cast = einsum(equation = aw_17_equation_0, values = (var_281_cast_2, var_273_cast_2));
            tensor<string, []> aw_19_equation_0 = const()[name = tensor<string, []>("aw_19_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_19_cast = einsum(equation = aw_19_equation_0, values = (var_281_cast_3, var_273_cast_3));
            tensor<string, []> aw_21_equation_0 = const()[name = tensor<string, []>("aw_21_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_21_cast = einsum(equation = aw_21_equation_0, values = (var_281_cast_4, var_273_cast_4));
            tensor<string, []> aw_23_equation_0 = const()[name = tensor<string, []>("aw_23_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_23_cast = einsum(equation = aw_23_equation_0, values = (var_281_cast_5, var_273_cast_5));
            tensor<fp16, [1, 1500, 1, 1500]> var_307_cast = softmax(axis = var_221, x = aw_13_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_308_cast = softmax(axis = var_221, x = aw_15_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_309_cast = softmax(axis = var_221, x = aw_17_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_310_cast = softmax(axis = var_221, x = aw_19_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_311_cast = softmax(axis = var_221, x = aw_21_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_312_cast = softmax(axis = var_221, x = aw_23_cast);
            tensor<string, []> var_314_equation_0 = const()[name = tensor<string, []>("op_314_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_314_cast = einsum(equation = var_314_equation_0, values = (var_288_cast_0, var_307_cast));
            tensor<string, []> var_316_equation_0 = const()[name = tensor<string, []>("op_316_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_316_cast = einsum(equation = var_316_equation_0, values = (var_288_cast_1, var_308_cast));
            tensor<string, []> var_318_equation_0 = const()[name = tensor<string, []>("op_318_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_318_cast = einsum(equation = var_318_equation_0, values = (var_288_cast_2, var_309_cast));
            tensor<string, []> var_320_equation_0 = const()[name = tensor<string, []>("op_320_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_320_cast = einsum(equation = var_320_equation_0, values = (var_288_cast_3, var_310_cast));
            tensor<string, []> var_322_equation_0 = const()[name = tensor<string, []>("op_322_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_322_cast = einsum(equation = var_322_equation_0, values = (var_288_cast_4, var_311_cast));
            tensor<string, []> var_324_equation_0 = const()[name = tensor<string, []>("op_324_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_324_cast = einsum(equation = var_324_equation_0, values = (var_288_cast_5, var_312_cast));
            tensor<bool, []> input_15_interleave_0 = const()[name = tensor<string, []>("input_15_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_15_cast = concat(axis = var_221, interleave = input_15_interleave_0, values = (var_314_cast, var_316_cast, var_318_cast, var_320_cast, var_322_cast, var_324_cast));
            tensor<int32, [2]> var_329 = const()[name = tensor<string, []>("op_329"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_331 = const()[name = tensor<string, []>("op_331"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_333_pad_type_0 = const()[name = tensor<string, []>("op_333_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_333_pad_0 = const()[name = tensor<string, []>("op_333_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_1_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6660352)))];
            tensor<fp16, [384]> blocks_1_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6955328)))];
            tensor<fp16, [1, 384, 1, 1500]> var_333_cast = conv(bias = blocks_1_attn_out_bias_to_fp16, dilations = var_331, groups = var_221, pad = var_333_pad_0, pad_type = var_333_pad_type_0, strides = var_329, weight = blocks_1_attn_out_weight_to_fp16, x = input_15_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_7_cast = add(x = inputs_5_cast, y = var_333_cast);
            tensor<int32, [1]> var_337 = const()[name = tensor<string, []>("op_337"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_7_cast = reduce_mean(axes = var_337, keep_dims = var_222, x = inputs_7_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_7_cast = sub(x = inputs_7_cast, y = channels_mean_7_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_7_cast = mul(x = zero_mean_7_cast, y = zero_mean_7_cast);
            tensor<int32, [1]> var_341 = const()[name = tensor<string, []>("op_341"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_342_cast = reduce_mean(axes = var_341, keep_dims = var_222, x = zero_mean_sq_7_cast);
            tensor<fp16, []> var_343_to_fp16 = const()[name = tensor<string, []>("op_343_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_344_cast = add(x = var_342_cast, y = var_343_to_fp16);
            tensor<fp16, []> denom_7_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_7_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_7_cast = rsqrt(epsilon = denom_7_epsilon_0_to_fp16, x = var_344_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_7_cast = mul(x = zero_mean_7_cast, y = denom_7_cast);
            tensor<fp16, [1, 384, 1, 1]> var_348_to_fp16 = const()[name = tensor<string, []>("op_348_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6956160)))];
            tensor<fp16, [1, 384, 1, 1500]> var_349_cast = add(x = out_7_cast, y = var_348_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_351_to_fp16 = const()[name = tensor<string, []>("op_351_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6956992)))];
            tensor<fp16, [1, 384, 1, 1500]> input_17_cast = mul(x = var_349_cast, y = var_351_to_fp16);
            tensor<int32, [2]> var_357 = const()[name = tensor<string, []>("op_357"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_359 = const()[name = tensor<string, []>("op_359"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_19_pad_type_0 = const()[name = tensor<string, []>("input_19_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_1_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6957824)))];
            tensor<fp16, [1536]> blocks_1_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8137536)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_19_cast = conv(bias = blocks_1_mlp_0_bias_to_fp16, dilations = var_359, groups = var_221, pad = input_19_pad_0, pad_type = input_19_pad_type_0, strides = var_357, weight = blocks_1_mlp_0_weight_to_fp16, x = input_17_cast);
            tensor<string, []> input_21_mode_0 = const()[name = tensor<string, []>("input_21_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_21_cast = gelu(mode = input_21_mode_0, x = input_19_cast);
            tensor<int32, [2]> var_365 = const()[name = tensor<string, []>("op_365"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_367 = const()[name = tensor<string, []>("op_367"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_369_pad_type_0 = const()[name = tensor<string, []>("op_369_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_369_pad_0 = const()[name = tensor<string, []>("op_369_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_1_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8140672)))];
            tensor<fp16, [384]> blocks_1_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9320384)))];
            tensor<fp16, [1, 384, 1, 1500]> var_369_cast = conv(bias = blocks_1_mlp_2_bias_to_fp16, dilations = var_367, groups = var_221, pad = var_369_pad_0, pad_type = var_369_pad_type_0, strides = var_365, weight = blocks_1_mlp_2_weight_to_fp16, x = input_21_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_9_cast = add(x = inputs_7_cast, y = var_369_cast);
            tensor<int32, []> var_377 = const()[name = tensor<string, []>("op_377"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_378 = const()[name = tensor<string, []>("op_378"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_387 = const()[name = tensor<string, []>("op_387"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_9_cast = reduce_mean(axes = var_387, keep_dims = var_378, x = inputs_9_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_9_cast = sub(x = inputs_9_cast, y = channels_mean_9_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_9_cast = mul(x = zero_mean_9_cast, y = zero_mean_9_cast);
            tensor<int32, [1]> var_391 = const()[name = tensor<string, []>("op_391"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_392_cast = reduce_mean(axes = var_391, keep_dims = var_378, x = zero_mean_sq_9_cast);
            tensor<fp16, []> var_393_to_fp16 = const()[name = tensor<string, []>("op_393_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_394_cast = add(x = var_392_cast, y = var_393_to_fp16);
            tensor<fp16, []> denom_9_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_9_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_9_cast = rsqrt(epsilon = denom_9_epsilon_0_to_fp16, x = var_394_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_9_cast = mul(x = zero_mean_9_cast, y = denom_9_cast);
            tensor<fp16, [1, 384, 1, 1]> var_398_to_fp16 = const()[name = tensor<string, []>("op_398_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9321216)))];
            tensor<fp16, [1, 384, 1, 1500]> var_399_cast = add(x = out_9_cast, y = var_398_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_401_to_fp16 = const()[name = tensor<string, []>("op_401_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9322048)))];
            tensor<fp16, [1, 384, 1, 1500]> input_23_cast = mul(x = var_399_cast, y = var_401_to_fp16);
            tensor<int32, [2]> var_409 = const()[name = tensor<string, []>("op_409"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_411 = const()[name = tensor<string, []>("op_411"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_5_pad_type_0 = const()[name = tensor<string, []>("q_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_5_pad_0 = const()[name = tensor<string, []>("q_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_428_weight_0_to_fp16 = const()[name = tensor<string, []>("op_428_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9322880)))];
            tensor<fp16, [384]> var_428_bias_0_to_fp16 = const()[name = tensor<string, []>("op_428_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9617856)))];
            tensor<fp16, [1, 384, 1, 1500]> var_428_cast = conv(bias = var_428_bias_0_to_fp16, dilations = var_411, groups = var_377, pad = q_5_pad_0, pad_type = q_5_pad_type_0, strides = var_409, weight = var_428_weight_0_to_fp16, x = input_23_cast);
            tensor<int32, [2]> var_415 = const()[name = tensor<string, []>("op_415"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_417 = const()[name = tensor<string, []>("op_417"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_5_pad_type_0 = const()[name = tensor<string, []>("k_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_5_pad_0 = const()[name = tensor<string, []>("k_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_2_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9618688)))];
            tensor<fp16, [1, 384, 1, 1500]> k_5_cast = conv(dilations = var_417, groups = var_377, pad = k_5_pad_0, pad_type = k_5_pad_type_0, strides = var_415, weight = blocks_2_attn_key_weight_to_fp16, x = input_23_cast);
            tensor<int32, [2]> var_422 = const()[name = tensor<string, []>("op_422"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_424 = const()[name = tensor<string, []>("op_424"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_426_pad_type_0 = const()[name = tensor<string, []>("op_426_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_426_pad_0 = const()[name = tensor<string, []>("op_426_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_2_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9913664)))];
            tensor<fp16, [384]> blocks_2_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10208640)))];
            tensor<fp16, [1, 384, 1, 1500]> var_426_cast = conv(bias = blocks_2_attn_value_bias_to_fp16, dilations = var_424, groups = var_377, pad = var_426_pad_0, pad_type = var_426_pad_type_0, strides = var_422, weight = blocks_2_attn_value_weight_to_fp16, x = input_23_cast);
            tensor<int32, [6]> tile_6 = const()[name = tensor<string, []>("tile_6"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_429_axis_0 = const()[name = tensor<string, []>("op_429_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_429_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_429_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_429_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_429_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_429_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_429_cast_5 = split(axis = var_429_axis_0, split_sizes = tile_6, x = var_428_cast);
            tensor<int32, [4]> var_436_perm_0 = const()[name = tensor<string, []>("op_436_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_7 = const()[name = tensor<string, []>("tile_7"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_437_axis_0 = const()[name = tensor<string, []>("op_437_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_2 = transpose(perm = var_436_perm_0, x = k_5_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_437_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_437_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_437_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_437_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_437_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_437_cast_5 = split(axis = var_437_axis_0, split_sizes = tile_7, x = transpose_2);
            tensor<int32, [6]> tile_8 = const()[name = tensor<string, []>("tile_8"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_444_axis_0 = const()[name = tensor<string, []>("op_444_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_444_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_444_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_444_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_444_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_444_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_444_cast_5 = split(axis = var_444_axis_0, split_sizes = tile_8, x = var_426_cast);
            tensor<string, []> aw_25_equation_0 = const()[name = tensor<string, []>("aw_25_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_25_cast = einsum(equation = aw_25_equation_0, values = (var_437_cast_0, var_429_cast_0));
            tensor<string, []> aw_27_equation_0 = const()[name = tensor<string, []>("aw_27_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_27_cast = einsum(equation = aw_27_equation_0, values = (var_437_cast_1, var_429_cast_1));
            tensor<string, []> aw_29_equation_0 = const()[name = tensor<string, []>("aw_29_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_29_cast = einsum(equation = aw_29_equation_0, values = (var_437_cast_2, var_429_cast_2));
            tensor<string, []> aw_31_equation_0 = const()[name = tensor<string, []>("aw_31_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_31_cast = einsum(equation = aw_31_equation_0, values = (var_437_cast_3, var_429_cast_3));
            tensor<string, []> aw_33_equation_0 = const()[name = tensor<string, []>("aw_33_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_33_cast = einsum(equation = aw_33_equation_0, values = (var_437_cast_4, var_429_cast_4));
            tensor<string, []> aw_35_equation_0 = const()[name = tensor<string, []>("aw_35_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_35_cast = einsum(equation = aw_35_equation_0, values = (var_437_cast_5, var_429_cast_5));
            tensor<fp16, [1, 1500, 1, 1500]> var_463_cast = softmax(axis = var_377, x = aw_25_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_464_cast = softmax(axis = var_377, x = aw_27_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_465_cast = softmax(axis = var_377, x = aw_29_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_466_cast = softmax(axis = var_377, x = aw_31_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_467_cast = softmax(axis = var_377, x = aw_33_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_468_cast = softmax(axis = var_377, x = aw_35_cast);
            tensor<string, []> var_470_equation_0 = const()[name = tensor<string, []>("op_470_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_470_cast = einsum(equation = var_470_equation_0, values = (var_444_cast_0, var_463_cast));
            tensor<string, []> var_472_equation_0 = const()[name = tensor<string, []>("op_472_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_472_cast = einsum(equation = var_472_equation_0, values = (var_444_cast_1, var_464_cast));
            tensor<string, []> var_474_equation_0 = const()[name = tensor<string, []>("op_474_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_474_cast = einsum(equation = var_474_equation_0, values = (var_444_cast_2, var_465_cast));
            tensor<string, []> var_476_equation_0 = const()[name = tensor<string, []>("op_476_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_476_cast = einsum(equation = var_476_equation_0, values = (var_444_cast_3, var_466_cast));
            tensor<string, []> var_478_equation_0 = const()[name = tensor<string, []>("op_478_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_478_cast = einsum(equation = var_478_equation_0, values = (var_444_cast_4, var_467_cast));
            tensor<string, []> var_480_equation_0 = const()[name = tensor<string, []>("op_480_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_480_cast = einsum(equation = var_480_equation_0, values = (var_444_cast_5, var_468_cast));
            tensor<bool, []> input_25_interleave_0 = const()[name = tensor<string, []>("input_25_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_25_cast = concat(axis = var_377, interleave = input_25_interleave_0, values = (var_470_cast, var_472_cast, var_474_cast, var_476_cast, var_478_cast, var_480_cast));
            tensor<int32, [2]> var_485 = const()[name = tensor<string, []>("op_485"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_487 = const()[name = tensor<string, []>("op_487"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_489_pad_type_0 = const()[name = tensor<string, []>("op_489_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_489_pad_0 = const()[name = tensor<string, []>("op_489_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_2_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10209472)))];
            tensor<fp16, [384]> blocks_2_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10504448)))];
            tensor<fp16, [1, 384, 1, 1500]> var_489_cast = conv(bias = blocks_2_attn_out_bias_to_fp16, dilations = var_487, groups = var_377, pad = var_489_pad_0, pad_type = var_489_pad_type_0, strides = var_485, weight = blocks_2_attn_out_weight_to_fp16, x = input_25_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_11_cast = add(x = inputs_9_cast, y = var_489_cast);
            tensor<int32, [1]> var_493 = const()[name = tensor<string, []>("op_493"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_11_cast = reduce_mean(axes = var_493, keep_dims = var_378, x = inputs_11_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_11_cast = sub(x = inputs_11_cast, y = channels_mean_11_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_11_cast = mul(x = zero_mean_11_cast, y = zero_mean_11_cast);
            tensor<int32, [1]> var_497 = const()[name = tensor<string, []>("op_497"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_498_cast = reduce_mean(axes = var_497, keep_dims = var_378, x = zero_mean_sq_11_cast);
            tensor<fp16, []> var_499_to_fp16 = const()[name = tensor<string, []>("op_499_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_500_cast = add(x = var_498_cast, y = var_499_to_fp16);
            tensor<fp16, []> denom_11_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_11_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_11_cast = rsqrt(epsilon = denom_11_epsilon_0_to_fp16, x = var_500_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_11_cast = mul(x = zero_mean_11_cast, y = denom_11_cast);
            tensor<fp16, [1, 384, 1, 1]> var_504_to_fp16 = const()[name = tensor<string, []>("op_504_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10505280)))];
            tensor<fp16, [1, 384, 1, 1500]> var_505_cast = add(x = out_11_cast, y = var_504_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_507_to_fp16 = const()[name = tensor<string, []>("op_507_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10506112)))];
            tensor<fp16, [1, 384, 1, 1500]> input_27_cast = mul(x = var_505_cast, y = var_507_to_fp16);
            tensor<int32, [2]> var_513 = const()[name = tensor<string, []>("op_513"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_515 = const()[name = tensor<string, []>("op_515"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_29_pad_type_0 = const()[name = tensor<string, []>("input_29_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_2_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10506944)))];
            tensor<fp16, [1536]> blocks_2_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11686656)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_29_cast = conv(bias = blocks_2_mlp_0_bias_to_fp16, dilations = var_515, groups = var_377, pad = input_29_pad_0, pad_type = input_29_pad_type_0, strides = var_513, weight = blocks_2_mlp_0_weight_to_fp16, x = input_27_cast);
            tensor<string, []> input_31_mode_0 = const()[name = tensor<string, []>("input_31_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_31_cast = gelu(mode = input_31_mode_0, x = input_29_cast);
            tensor<int32, [2]> var_521 = const()[name = tensor<string, []>("op_521"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_523 = const()[name = tensor<string, []>("op_523"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_525_pad_type_0 = const()[name = tensor<string, []>("op_525_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_525_pad_0 = const()[name = tensor<string, []>("op_525_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_2_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11689792)))];
            tensor<fp16, [384]> blocks_2_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12869504)))];
            tensor<fp16, [1, 384, 1, 1500]> var_525_cast = conv(bias = blocks_2_mlp_2_bias_to_fp16, dilations = var_523, groups = var_377, pad = var_525_pad_0, pad_type = var_525_pad_type_0, strides = var_521, weight = blocks_2_mlp_2_weight_to_fp16, x = input_31_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_13_cast = add(x = inputs_11_cast, y = var_525_cast);
            tensor<int32, []> var_533 = const()[name = tensor<string, []>("op_533"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_534 = const()[name = tensor<string, []>("op_534"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_543 = const()[name = tensor<string, []>("op_543"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_13_cast = reduce_mean(axes = var_543, keep_dims = var_534, x = inputs_13_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_13_cast = sub(x = inputs_13_cast, y = channels_mean_13_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_13_cast = mul(x = zero_mean_13_cast, y = zero_mean_13_cast);
            tensor<int32, [1]> var_547 = const()[name = tensor<string, []>("op_547"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_548_cast = reduce_mean(axes = var_547, keep_dims = var_534, x = zero_mean_sq_13_cast);
            tensor<fp16, []> var_549_to_fp16 = const()[name = tensor<string, []>("op_549_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_550_cast = add(x = var_548_cast, y = var_549_to_fp16);
            tensor<fp16, []> denom_13_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_13_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_13_cast = rsqrt(epsilon = denom_13_epsilon_0_to_fp16, x = var_550_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_13_cast = mul(x = zero_mean_13_cast, y = denom_13_cast);
            tensor<fp16, [1, 384, 1, 1]> var_554_to_fp16 = const()[name = tensor<string, []>("op_554_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12870336)))];
            tensor<fp16, [1, 384, 1, 1500]> var_555_cast = add(x = out_13_cast, y = var_554_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_557_to_fp16 = const()[name = tensor<string, []>("op_557_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12871168)))];
            tensor<fp16, [1, 384, 1, 1500]> input_33_cast = mul(x = var_555_cast, y = var_557_to_fp16);
            tensor<int32, [2]> var_565 = const()[name = tensor<string, []>("op_565"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_567 = const()[name = tensor<string, []>("op_567"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_pad_type_0 = const()[name = tensor<string, []>("q_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_pad_0 = const()[name = tensor<string, []>("q_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_584_weight_0_to_fp16 = const()[name = tensor<string, []>("op_584_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12872000)))];
            tensor<fp16, [384]> var_584_bias_0_to_fp16 = const()[name = tensor<string, []>("op_584_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13166976)))];
            tensor<fp16, [1, 384, 1, 1500]> var_584_cast = conv(bias = var_584_bias_0_to_fp16, dilations = var_567, groups = var_533, pad = q_pad_0, pad_type = q_pad_type_0, strides = var_565, weight = var_584_weight_0_to_fp16, x = input_33_cast);
            tensor<int32, [2]> var_571 = const()[name = tensor<string, []>("op_571"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_573 = const()[name = tensor<string, []>("op_573"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_pad_type_0 = const()[name = tensor<string, []>("k_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_pad_0 = const()[name = tensor<string, []>("k_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_3_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13167808)))];
            tensor<fp16, [1, 384, 1, 1500]> k_cast = conv(dilations = var_573, groups = var_533, pad = k_pad_0, pad_type = k_pad_type_0, strides = var_571, weight = blocks_3_attn_key_weight_to_fp16, x = input_33_cast);
            tensor<int32, [2]> var_578 = const()[name = tensor<string, []>("op_578"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_580 = const()[name = tensor<string, []>("op_580"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_582_pad_type_0 = const()[name = tensor<string, []>("op_582_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_582_pad_0 = const()[name = tensor<string, []>("op_582_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_3_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13462784)))];
            tensor<fp16, [384]> blocks_3_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13757760)))];
            tensor<fp16, [1, 384, 1, 1500]> var_582_cast = conv(bias = blocks_3_attn_value_bias_to_fp16, dilations = var_580, groups = var_533, pad = var_582_pad_0, pad_type = var_582_pad_type_0, strides = var_578, weight = blocks_3_attn_value_weight_to_fp16, x = input_33_cast);
            tensor<int32, [6]> tile_9 = const()[name = tensor<string, []>("tile_9"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_585_axis_0 = const()[name = tensor<string, []>("op_585_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_585_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_585_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_585_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_585_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_585_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_585_cast_5 = split(axis = var_585_axis_0, split_sizes = tile_9, x = var_584_cast);
            tensor<int32, [4]> var_592_perm_0 = const()[name = tensor<string, []>("op_592_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_10 = const()[name = tensor<string, []>("tile_10"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_593_axis_0 = const()[name = tensor<string, []>("op_593_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_1 = transpose(perm = var_592_perm_0, x = k_cast);
            tensor<fp16, [1, 1500, 1, 64]> var_593_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_593_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_593_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_593_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_593_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_593_cast_5 = split(axis = var_593_axis_0, split_sizes = tile_10, x = transpose_1);
            tensor<int32, [6]> tile_11 = const()[name = tensor<string, []>("tile_11"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_600_axis_0 = const()[name = tensor<string, []>("op_600_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_600_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_600_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_600_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_600_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_600_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_600_cast_5 = split(axis = var_600_axis_0, split_sizes = tile_11, x = var_582_cast);
            tensor<string, []> aw_37_equation_0 = const()[name = tensor<string, []>("aw_37_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_37_cast = einsum(equation = aw_37_equation_0, values = (var_593_cast_0, var_585_cast_0));
            tensor<string, []> aw_39_equation_0 = const()[name = tensor<string, []>("aw_39_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_39_cast = einsum(equation = aw_39_equation_0, values = (var_593_cast_1, var_585_cast_1));
            tensor<string, []> aw_41_equation_0 = const()[name = tensor<string, []>("aw_41_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_41_cast = einsum(equation = aw_41_equation_0, values = (var_593_cast_2, var_585_cast_2));
            tensor<string, []> aw_43_equation_0 = const()[name = tensor<string, []>("aw_43_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_43_cast = einsum(equation = aw_43_equation_0, values = (var_593_cast_3, var_585_cast_3));
            tensor<string, []> aw_45_equation_0 = const()[name = tensor<string, []>("aw_45_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_45_cast = einsum(equation = aw_45_equation_0, values = (var_593_cast_4, var_585_cast_4));
            tensor<string, []> aw_equation_0 = const()[name = tensor<string, []>("aw_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_cast = einsum(equation = aw_equation_0, values = (var_593_cast_5, var_585_cast_5));
            tensor<fp16, [1, 1500, 1, 1500]> var_619_cast = softmax(axis = var_533, x = aw_37_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_620_cast = softmax(axis = var_533, x = aw_39_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_621_cast = softmax(axis = var_533, x = aw_41_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_622_cast = softmax(axis = var_533, x = aw_43_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_623_cast = softmax(axis = var_533, x = aw_45_cast);
            tensor<fp16, [1, 1500, 1, 1500]> var_624_cast = softmax(axis = var_533, x = aw_cast);
            tensor<string, []> var_626_equation_0 = const()[name = tensor<string, []>("op_626_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_626_cast = einsum(equation = var_626_equation_0, values = (var_600_cast_0, var_619_cast));
            tensor<string, []> var_628_equation_0 = const()[name = tensor<string, []>("op_628_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_628_cast = einsum(equation = var_628_equation_0, values = (var_600_cast_1, var_620_cast));
            tensor<string, []> var_630_equation_0 = const()[name = tensor<string, []>("op_630_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_630_cast = einsum(equation = var_630_equation_0, values = (var_600_cast_2, var_621_cast));
            tensor<string, []> var_632_equation_0 = const()[name = tensor<string, []>("op_632_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_632_cast = einsum(equation = var_632_equation_0, values = (var_600_cast_3, var_622_cast));
            tensor<string, []> var_634_equation_0 = const()[name = tensor<string, []>("op_634_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_634_cast = einsum(equation = var_634_equation_0, values = (var_600_cast_4, var_623_cast));
            tensor<string, []> var_636_equation_0 = const()[name = tensor<string, []>("op_636_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_636_cast = einsum(equation = var_636_equation_0, values = (var_600_cast_5, var_624_cast));
            tensor<bool, []> input_35_interleave_0 = const()[name = tensor<string, []>("input_35_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_35_cast = concat(axis = var_533, interleave = input_35_interleave_0, values = (var_626_cast, var_628_cast, var_630_cast, var_632_cast, var_634_cast, var_636_cast));
            tensor<int32, [2]> var_641 = const()[name = tensor<string, []>("op_641"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_643 = const()[name = tensor<string, []>("op_643"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_645_pad_type_0 = const()[name = tensor<string, []>("op_645_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_645_pad_0 = const()[name = tensor<string, []>("op_645_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_3_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13758592)))];
            tensor<fp16, [384]> blocks_3_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14053568)))];
            tensor<fp16, [1, 384, 1, 1500]> var_645_cast = conv(bias = blocks_3_attn_out_bias_to_fp16, dilations = var_643, groups = var_533, pad = var_645_pad_0, pad_type = var_645_pad_type_0, strides = var_641, weight = blocks_3_attn_out_weight_to_fp16, x = input_35_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_15_cast = add(x = inputs_13_cast, y = var_645_cast);
            tensor<int32, [1]> var_649 = const()[name = tensor<string, []>("op_649"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_15_cast = reduce_mean(axes = var_649, keep_dims = var_534, x = inputs_15_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_15_cast = sub(x = inputs_15_cast, y = channels_mean_15_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_15_cast = mul(x = zero_mean_15_cast, y = zero_mean_15_cast);
            tensor<int32, [1]> var_653 = const()[name = tensor<string, []>("op_653"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_654_cast = reduce_mean(axes = var_653, keep_dims = var_534, x = zero_mean_sq_15_cast);
            tensor<fp16, []> var_655_to_fp16 = const()[name = tensor<string, []>("op_655_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_656_cast = add(x = var_654_cast, y = var_655_to_fp16);
            tensor<fp16, []> denom_15_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_15_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_15_cast = rsqrt(epsilon = denom_15_epsilon_0_to_fp16, x = var_656_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_15_cast = mul(x = zero_mean_15_cast, y = denom_15_cast);
            tensor<fp16, [1, 384, 1, 1]> var_660_to_fp16 = const()[name = tensor<string, []>("op_660_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14054400)))];
            tensor<fp16, [1, 384, 1, 1500]> var_661_cast = add(x = out_15_cast, y = var_660_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_663_to_fp16 = const()[name = tensor<string, []>("op_663_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14055232)))];
            tensor<fp16, [1, 384, 1, 1500]> input_37_cast = mul(x = var_661_cast, y = var_663_to_fp16);
            tensor<int32, [2]> var_669 = const()[name = tensor<string, []>("op_669"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_671 = const()[name = tensor<string, []>("op_671"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_39_pad_type_0 = const()[name = tensor<string, []>("input_39_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_39_pad_0 = const()[name = tensor<string, []>("input_39_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_3_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14056064)))];
            tensor<fp16, [1536]> blocks_3_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15235776)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_39_cast = conv(bias = blocks_3_mlp_0_bias_to_fp16, dilations = var_671, groups = var_533, pad = input_39_pad_0, pad_type = input_39_pad_type_0, strides = var_669, weight = blocks_3_mlp_0_weight_to_fp16, x = input_37_cast);
            tensor<string, []> input_mode_0 = const()[name = tensor<string, []>("input_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_cast = gelu(mode = input_mode_0, x = input_39_cast);
            tensor<int32, [2]> var_677 = const()[name = tensor<string, []>("op_677"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_679 = const()[name = tensor<string, []>("op_679"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_681_pad_type_0 = const()[name = tensor<string, []>("op_681_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_681_pad_0 = const()[name = tensor<string, []>("op_681_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_3_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15238912)))];
            tensor<fp16, [384]> blocks_3_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16418624)))];
            tensor<fp16, [1, 384, 1, 1500]> var_681_cast = conv(bias = blocks_3_mlp_2_bias_to_fp16, dilations = var_679, groups = var_533, pad = var_681_pad_0, pad_type = var_681_pad_type_0, strides = var_677, weight = blocks_3_mlp_2_weight_to_fp16, x = input_cast);
            tensor<fp16, [1, 384, 1, 1500]> inputs_cast = add(x = inputs_15_cast, y = var_681_cast);
            tensor<bool, []> var_685 = const()[name = tensor<string, []>("op_685"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_689 = const()[name = tensor<string, []>("op_689"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_cast = reduce_mean(axes = var_689, keep_dims = var_685, x = inputs_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_cast = sub(x = inputs_cast, y = channels_mean_cast);
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_cast = mul(x = zero_mean_cast, y = zero_mean_cast);
            tensor<int32, [1]> var_693 = const()[name = tensor<string, []>("op_693"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_694_cast = reduce_mean(axes = var_693, keep_dims = var_685, x = zero_mean_sq_cast);
            tensor<fp16, []> var_695_to_fp16 = const()[name = tensor<string, []>("op_695_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_696_cast = add(x = var_694_cast, y = var_695_to_fp16);
            tensor<fp16, []> denom_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_cast = rsqrt(epsilon = denom_epsilon_0_to_fp16, x = var_696_cast);
            tensor<fp16, [1, 384, 1, 1500]> out_17_cast = mul(x = zero_mean_cast, y = denom_cast);
            tensor<fp16, [1, 384, 1, 1]> var_700_to_fp16 = const()[name = tensor<string, []>("op_700_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16419456)))];
            tensor<fp16, [1, 384, 1, 1500]> var_701_cast = add(x = out_17_cast, y = var_700_to_fp16);
            tensor<fp16, [1, 384, 1, 1]> var_703_to_fp16 = const()[name = tensor<string, []>("op_703_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16420288)))];
            tensor<fp16, [1, 384, 1, 1500]> x_cast = mul(x = var_701_cast, y = var_703_to_fp16);
            tensor<int32, [1]> var_706_axes_0 = const()[name = tensor<string, []>("op_706_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 384, 1500]> var_706_cast = squeeze(axes = var_706_axes_0, x = x_cast);
            tensor<int32, [3]> var_709_perm_0 = const()[name = tensor<string, []>("op_709_perm_0"), val = tensor<int32, [3]>([0, 2, 1])];
            tensor<string, []> var_709_cast_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_709_cast_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp16, [1, 1500, 384]> transpose_0 = transpose(perm = var_709_perm_0, x = var_706_cast);
            tensor<fp32, [1, 1500, 384]> output = cast(dtype = var_709_cast_to_fp32_dtype_0, x = transpose_0);
        } -> (output);
}